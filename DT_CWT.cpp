#include <iostream>
#include <fstream>
#include <string>
#include "opencv2\adas.hpp"
#include "opencv2\bgsegm.hpp"
#include "opencv2\bioinspired.hpp"
#include "opencv2\calib3d.hpp"
#include "opencv2\core.hpp"
#include "opencv2\cuda.hpp"
#include "opencv2\cudaarithm.hpp"
#include "opencv2\cudacodec.hpp"
#include "opencv2\cudafeatures2d.hpp"
#include "opencv2\cudafilters.hpp"
#include "opencv2\cudaimgproc.hpp"
#include "opencv2\cudaoptflow.hpp"
#include "opencv2\cudastereo.hpp"
#include "opencv2\cudawarping.hpp"
#include "opencv2\face.hpp"
#include "opencv2\features2d.hpp"
#include "opencv2\flann.hpp"
#include "opencv2\highgui.hpp"
#include "opencv2\imgcodecs.hpp"
#include "opencv2\imgproc.hpp"
#include "opencv2\ml.hpp"
#include "opencv2\nonfree.hpp"
#include "opencv2\objdetect.hpp"
#include "opencv2\opencv.hpp"
#include "opencv2\opencv_modules.hpp"
#include "opencv2\optflow.hpp"
#include "opencv2\optim.hpp"
#include "opencv2\photo.hpp"
#include "opencv2\rgbd.hpp"
#include "opencv2\saliency.hpp"
#include "opencv2\shape.hpp"
#include "opencv2\softcascade.hpp"
#include "opencv2\stitching.hpp"
#include "opencv2\superres.hpp"
#include "opencv2\surface_matching.hpp"
#include "opencv2\text.hpp"
#include "opencv2\tracking.hpp"
#include "opencv2\video.hpp"
#include "opencv2\videoio.hpp"
#include "opencv2\videostab.hpp"
#include "opencv2\ximgproc.hpp"
#include "opencv2\xobjdetect.hpp"
#include "opencv2\xphoto.hpp"

#include "cnpy.h"

#define is_aligned(POINTER, BYTE_COUNT) \
    (((uintptr_t)(const void *)(POINTER)) % (BYTE_COUNT) == 0)

//Default Biort:
//near_sym_a: 4 kernels, 5,7,7,5
const double near_sym_a_biort[] = { -0.05, 0.25, 0.6, 0.25, -0.05,
-0.01071428571428571265011786550758188241161406040192, -0.0535714285714285684547597554683306952938437461853, 0.26071428571428573173207610125245992094278335571289, 0.60714285714285709527615608749329112470149993896484, 0.26071428571428573173207610125245992094278335571289, -0.0535714285714285684547597554683306952938437461853, -0.01071428571428571265011786550758188241161406040192,
0.01071428571428571265011786550758188241161406040192, -0.0535714285714285684547597554683306952938437461853, -0.26071428571428573173207610125245992094278335571289, 0.60714285714285709527615608749329112470149993896484, -0.26071428571428573173207610125245992094278335571289, -0.0535714285714285684547597554683306952938437461853, 0.01071428571428571265011786550758188241161406040192,
-0.05, -0.25, 0.6, -0.25, -0.05 };

//near_sym_b: 4 kernels, 13, 19, 19, 13
const double near_sym_b_biort[] = { -0.0017578125000000000433680868994201773602981120348, 0, 0.02226562500000000069388939039072283776476979255676, -0.046875, -0.04824218749999999861222121921855432447046041488647, 0.296875, 0.55546874999999995559107901499373838305473327636719, 0.296875, -0.04824218749999999861222121921855432447046041488647, -0.046875, 0.02226562500000000069388939039072283776476979255676, 0, -0.0017578125000000000433680868994201773602981120348,
7.06263950892857073158431768789000670949462801218033e-05, 0, -1.34190150669642846610607467283671212499029934406281e-03, -1.88337053571428552842248471677066845586523413658142e-03, 7.15680803571428457432457292952676652930676937103271e-03, 2.38560267857142842273798777341653476469218730926514e-02, -5.56431361607142779823753642176598077639937400817871e-02, -5.16880580357142807579329257805511588230729103088379e-02, 2.99757603236607161889537565002683550119400024414062e-01, 5.59430803571428603149229275004472583532333374023438e-01, 2.99757603236607161889537565002683550119400024414062e-01, -5.16880580357142807579329257805511588230729103088379e-02, -5.56431361607142779823753642176598077639937400817871e-02, 2.38560267857142842273798777341653476469218730926514e-02, 7.15680803571428457432457292952676652930676937103271e-03, -1.88337053571428552842248471677066845586523413658142e-03, -1.34190150669642846610607467283671212499029934406281e-03, 0, 7.06263950892857073158431768789000670949462801218033e-05,
-7.06263950892857073158431768789000670949462801218033e-05, 0, 1.34190150669642846610607467283671212499029934406281e-03, -1.88337053571428552842248471677066845586523413658142e-03, -7.15680803571428457432457292952676652930676937103271e-03, 2.38560267857142842273798777341653476469218730926514e-02, 5.56431361607142779823753642176598077639937400817871e-02, -5.16880580357142807579329257805511588230729103088379e-02, -2.99757603236607161889537565002683550119400024414062e-01, 5.59430803571428603149229275004472583532333374023438e-01, -2.99757603236607161889537565002683550119400024414062e-01, -5.16880580357142807579329257805511588230729103088379e-02, 5.56431361607142779823753642176598077639937400817871e-02, 2.38560267857142842273798777341653476469218730926514e-02, -7.15680803571428457432457292952676652930676937103271e-03, -1.88337053571428552842248471677066845586523413658142e-03, 1.34190150669642846610607467283671212499029934406281e-03, 0, -7.06263950892857073158431768789000670949462801218033e-05,
-0.0017578125000000000433680868994201773602981120348, -0, 0.02226562500000000069388939039072283776476979255676, 0.046875, -0.04824218749999999861222121921855432447046041488647, -0.296875, 0.55546874999999995559107901499373838305473327636719, -0.296875, -0.04824218749999999861222121921855432447046041488647, 0.046875, 0.02226562500000000069388939039072283776476979255676, -0, -0.0017578125000000000433680868994201773602981120348 };

//near_sym_b_bp: 6 kernels, 13, 19, 19, 13, 19, 19
const double near_sym_b_bp_biort[] = { -0.0017578125000000000433680868994201773602981120348, 0, 0.02226562500000000069388939039072283776476979255676, -0.046875, -0.04824218749999999861222121921855432447046041488647, 0.296875, 0.55546874999999995559107901499373838305473327636719, 0.296875, -0.04824218749999999861222121921855432447046041488647, -0.046875, 0.02226562500000000069388939039072283776476979255676, 0, -0.0017578125000000000433680868994201773602981120348,
7.06263950892857073158431768789000670949462801218033e-05, 0, -1.34190150669642846610607467283671212499029934406281e-03, -1.88337053571428552842248471677066845586523413658142e-03, 7.15680803571428457432457292952676652930676937103271e-03, 2.38560267857142842273798777341653476469218730926514e-02, -5.56431361607142779823753642176598077639937400817871e-02, -5.16880580357142807579329257805511588230729103088379e-02, 2.99757603236607161889537565002683550119400024414062e-01, 5.59430803571428603149229275004472583532333374023438e-01, 2.99757603236607161889537565002683550119400024414062e-01, -5.16880580357142807579329257805511588230729103088379e-02, -5.56431361607142779823753642176598077639937400817871e-02, 2.38560267857142842273798777341653476469218730926514e-02, 7.15680803571428457432457292952676652930676937103271e-03, -1.88337053571428552842248471677066845586523413658142e-03, -1.34190150669642846610607467283671212499029934406281e-03, 0, 7.06263950892857073158431768789000670949462801218033e-05,
-7.06263950892857073158431768789000670949462801218033e-05, 0, 1.34190150669642846610607467283671212499029934406281e-03, -1.88337053571428552842248471677066845586523413658142e-03, -7.15680803571428457432457292952676652930676937103271e-03, 2.38560267857142842273798777341653476469218730926514e-02, 5.56431361607142779823753642176598077639937400817871e-02, -5.16880580357142807579329257805511588230729103088379e-02, -2.99757603236607161889537565002683550119400024414062e-01, 5.59430803571428603149229275004472583532333374023438e-01, -2.99757603236607161889537565002683550119400024414062e-01, -5.16880580357142807579329257805511588230729103088379e-02, 5.56431361607142779823753642176598077639937400817871e-02, 2.38560267857142842273798777341653476469218730926514e-02, -7.15680803571428457432457292952676652930676937103271e-03, -1.88337053571428552842248471677066845586523413658142e-03, 1.34190150669642846610607467283671212499029934406281e-03, 0, -7.06263950892857073158431768789000670949462801218033e-05,
-0.0017578125000000000433680868994201773602981120348, -0, 0.02226562500000000069388939039072283776476979255676, 0.046875, -0.04824218749999999861222121921855432447046041488647, -0.296875, 0.55546874999999995559107901499373838305473327636719, -0.296875, -0.04824218749999999861222121921855432447046041488647, 0.046875, 0.02226562500000000069388939039072283776476979255676, -0, -0.0017578125000000000433680868994201773602981120348,
-3.68250025673202204413297922158676556136924773454666e-04, -6.22253585579744328618034820976845367113128304481506e-04, -7.81782479825950121646652157814116890222067013382912e-05, 4.18582084706810211155447731812273559626191854476929e-03, 8.19178717888364472943241167968153604306280612945557e-03, -7.42327402480262663747589968465945275966078042984009e-03, -6.15384268799116992965103634105616947636008262634277e-02, -1.48158230911690502740185593211208470165729522705078e-01, -1.17076301639215757388612360045954119414091110229492e-01, 6.52908215843590156168829707894474267959594726562500e-01, -1.17076301639215757388612360045954119414091110229492e-01, -1.48158230911690502740185593211208470165729522705078e-01, -6.15384268799117062354042673177900724112987518310547e-02, -7.42327402480262923956111364987009437754750251770020e-03, 8.19178717888364299470893570287444163113832473754883e-03, 4.18582084706810211155447731812273559626191854476929e-03, -7.81782479825949172969751232997737133700866252183914e-05, -6.22253585579744220197817572426401966367848217487335e-04, -3.68250025673202150203189297883454855764284729957581e-04,
-3.68250025673202204413297922158676556136924773454666e-04, -6.22253585579744328618034820976845367113128304481506e-04, -7.81782479825950121646652157814116890222067013382912e-05, 4.18582084706810211155447731812273559626191854476929e-03, 8.19178717888364472943241167968153604306280612945557e-03, -7.42327402480262663747589968465945275966078042984009e-03, -6.15384268799116992965103634105616947636008262634277e-02, -1.48158230911690502740185593211208470165729522705078e-01, -1.17076301639215757388612360045954119414091110229492e-01, 6.52908215843590156168829707894474267959594726562500e-01, -1.17076301639215757388612360045954119414091110229492e-01, -1.48158230911690502740185593211208470165729522705078e-01, -6.15384268799117062354042673177900724112987518310547e-02, -7.42327402480262923956111364987009437754750251770020e-03, 8.19178717888364299470893570287444163113832473754883e-03, 4.18582084706810211155447731812273559626191854476929e-03, -7.81782479825949172969751232997737133700866252183914e-05, -6.22253585579744220197817572426401966367848217487335e-04, -3.68250025673202150203189297883454855764284729957581e-04 };

//Antonini: 4 kernels, 9, 7, 7, 9
const double antonini_biort[] = { 0.02674875741081010616095881005094270221889019012451, -0.0168641184428746683521271876315950066782534122467, -0.07822326652899051768752514135485398583114147186279, 0.26686411844287288852584083542751614004373550415039, 0.60294901823635926874089818738866597414016723632812, 0.26686411844287688532872948599106166511774063110352, -0.07822326652898839438599054574297042563557624816895, -0.01686411844287529285257853928214899497106671333313, 0.02674875741080964819396115217386977747082710266113,
-0.04563588155712514082829045491962460801005363464355, -0.02877176311424934143645693040980404475703835487366, 0.29563588155712799965257886469771619886159896850586, 0.55754352622850233967000121992896310985088348388672, 0.29563588155712333671587543904024641960859298706055, -0.02877176311425308150027113640589959686622023582458, -0.04563588155712607757896748239545559044927358627319,
0.04563588155712514082829045491962460801005363464355, -0.02877176311424934143645693040980404475703835487366, -0.29563588155712799965257886469771619886159896850586, 0.55754352622850233967000121992896310985088348388672, -0.29563588155712333671587543904024641960859298706055, -0.02877176311425308150027113640589959686622023582458, 0.04563588155712607757896748239545559044927358627319,
0.02674875741081010616095881005094270221889019012451, 0.0168641184428746683521271876315950066782534122467, -0.07822326652899051768752514135485398583114147186279, -0.26686411844287288852584083542751614004373550415039, 0.60294901823635926874089818738866597414016723632812, -0.26686411844287688532872948599106166511774063110352, -0.07822326652898839438599054574297042563557624816895, 0.01686411844287529285257853928214899497106671333313, 0.02674875741080964819396115217386977747082710266113 };

//Legall: 4 kernels 5, 3, 3, 5
const double legall_biort[] = { -0.125, 0.25, 0.75, 0.25, -0.125,
0.25, 0.5, 0.25,
-0.25, 0.5, -0.25,
-0.125, -0.25, 0.75, -0.25, -0.125 };

//Default Qshift:
//qshift_a: 8 kernels, 10 each
const double qshift_a_qshift[] = { 0.05113040528383165639336738195197540335357189178467, -0.01397537024688883834644403947322643944062292575836, -0.10983605166597086577606745549928746186196804046631, 0.26383956105893763277592256599746178835630416870117, 0.76662846779303717159592679308843798935413360595703, 0.56365571012705151243693535434431396424770355224609, 0.00087362269521709678705284618516202499449718743563, -0.10023121950747619635091467671372811309993267059326, -0.00168968127252815429259480417556460452033206820488, -0.00618188189211643819576114111669085104949772357941,
-0.00618188189211643819576114111669085104949772357941, -0.00168968127252815429259480417556460452033206820488, -0.10023121950747619635091467671372811309993267059326, 0.00087362269521709678705284618516202499449718743563, 0.56365571012705151243693535434431396424770355224609, 0.76662846779303717159592679308843798935413360595703, 0.26383956105893763277592256599746178835630416870117, -0.10983605166597086577606745549928746186196804046631, -0.01397537024688883834644403947322643944062292575836, 0.05113040528383165639336738195197540335357189178467,
-0.00618188189211643819576114111669085104949772357941, -0.00168968127252815429259480417556460452033206820488, -0.10023121950747619635091467671372811309993267059326, 0.00087362269521709678705284618516202499449718743563, 0.56365571012705151243693535434431396424770355224609, 0.76662846779303717159592679308843798935413360595703, 0.26383956105893763277592256599746178835630416870117, -0.10983605166597086577606745549928746186196804046631, -0.01397537024688883834644403947322643944062292575836, 0.05113040528383165639336738195197540335357189178467,
0.05113040528383165639336738195197540335357189178467, -0.01397537024688883834644403947322643944062292575836, -0.10983605166597086577606745549928746186196804046631, 0.26383956105893763277592256599746178835630416870117, 0.76662846779303717159592679308843798935413360595703, 0.56365571012705151243693535434431396424770355224609, 0.00087362269521709678705284618516202499449718743563, -0.10023121950747619635091467671372811309993267059326, -0.00168968127252815429259480417556460452033206820488, -0.00618188189211643819576114111669085104949772357941,
-0.00618188189211643819576114111669085104949772357941, 0.00168968127252815429259480417556460452033206820488, -0.10023121950747619635091467671372811309993267059326, -0.00087362269521709678705284618516202499449718743563, 0.56365571012705151243693535434431396424770355224609, -0.76662846779303717159592679308843798935413360595703, 0.26383956105893763277592256599746178835630416870117, 0.10983605166597086577606745549928746186196804046631, -0.01397537024688883834644403947322643944062292575836, -0.05113040528383165639336738195197540335357189178467,
-0.05113040528383165639336738195197540335357189178467, -0.01397537024688883834644403947322643944062292575836, 0.10983605166597086577606745549928746186196804046631, 0.26383956105893763277592256599746178835630416870117, -0.76662846779303717159592679308843798935413360595703, 0.56365571012705151243693535434431396424770355224609, -0.00087362269521709678705284618516202499449718743563, -0.10023121950747619635091467671372811309993267059326, 0.00168968127252815429259480417556460452033206820488, -0.00618188189211643819576114111669085104949772357941,
-0.05113040528383165639336738195197540335357189178467, -0.01397537024688883834644403947322643944062292575836, 0.10983605166597086577606745549928746186196804046631, 0.26383956105893763277592256599746178835630416870117, -0.76662846779303717159592679308843798935413360595703, 0.56365571012705151243693535434431396424770355224609, -0.00087362269521709678705284618516202499449718743563, -0.10023121950747619635091467671372811309993267059326, 0.00168968127252815429259480417556460452033206820488, -0.00618188189211643819576114111669085104949772357941,
-0.00618188189211643819576114111669085104949772357941, 0.00168968127252815429259480417556460452033206820488, -0.10023121950747619635091467671372811309993267059326, -0.00087362269521709678705284618516202499449718743563, 0.56365571012705151243693535434431396424770355224609, -0.76662846779303717159592679308843798935413360595703, 0.26383956105893763277592256599746178835630416870117, 0.10983605166597086577606745549928746186196804046631, -0.01397537024688883834644403947322643944062292575836, -0.05113040528383165639336738195197540335357189178467 };

//qshift_b: 8 kernels, 14 each
const double qshift_b_qshift[] = { 0.00325314276365318202216547760485809703823179006577, -0.0038832119991584900138559266480342557770200073719, 0.03466034684485348738025578541055438108742237091064, -0.03887280126882779185404359623134951107203960418701, -0.11720388769911527226952330238418653607368469238281, 0.27529538466888203718241356909857131540775299072266, 0.75614564389252247877948320819996297359466552734375, 0.56881042071212273292246663913829252123832702636719, 0.01186609203379699988001316768304604920558631420135, -0.10671180468666539853384023217586218379437923431396, 0.0238253847949202977873905950900734751485288143158, 0.01702522388155398858078370949442614801228046417236, -0.00543947593727411513042646618032449623569846153259, -0.00455689562847549130969460051687747181858867406845,
-0.00455689562847549130969460051687747181858867406845, -0.00543947593727411513042646618032449623569846153259, 0.01702522388155398858078370949442614801228046417236, 0.0238253847949202977873905950900734751485288143158, -0.10671180468666539853384023217586218379437923431396, 0.01186609203379699988001316768304604920558631420135, 0.56881042071212273292246663913829252123832702636719, 0.75614564389252247877948320819996297359466552734375, 0.27529538466888203718241356909857131540775299072266, -0.11720388769911527226952330238418653607368469238281, -0.03887280126882779185404359623134951107203960418701, 0.03466034684485348738025578541055438108742237091064, -0.0038832119991584900138559266480342557770200073719, 0.00325314276365318202216547760485809703823179006577,
-0.00455689562847549130969460051687747181858867406845, -0.00543947593727411513042646618032449623569846153259, 0.01702522388155398858078370949442614801228046417236, 0.0238253847949202977873905950900734751485288143158, -0.10671180468666539853384023217586218379437923431396, 0.01186609203379699988001316768304604920558631420135, 0.56881042071212273292246663913829252123832702636719, 0.75614564389252247877948320819996297359466552734375, 0.27529538466888203718241356909857131540775299072266, -0.11720388769911527226952330238418653607368469238281, -0.03887280126882779185404359623134951107203960418701, 0.03466034684485348738025578541055438108742237091064, -0.0038832119991584900138559266480342557770200073719, 0.00325314276365318202216547760485809703823179006577,
0.00325314276365318202216547760485809703823179006577, -0.0038832119991584900138559266480342557770200073719, 0.03466034684485348738025578541055438108742237091064, -0.03887280126882779185404359623134951107203960418701, -0.11720388769911527226952330238418653607368469238281, 0.27529538466888203718241356909857131540775299072266, 0.75614564389252247877948320819996297359466552734375, 0.56881042071212273292246663913829252123832702636719, 0.01186609203379699988001316768304604920558631420135, -0.10671180468666539853384023217586218379437923431396, 0.0238253847949202977873905950900734751485288143158, 0.01702522388155398858078370949442614801228046417236, -0.00543947593727411513042646618032449623569846153259, -0.00455689562847549130969460051687747181858867406845,
-0.00455689562847549130969460051687747181858867406845, 0.00543947593727411513042646618032449623569846153259, 0.01702522388155398858078370949442614801228046417236, -0.0238253847949202977873905950900734751485288143158, -0.10671180468666539853384023217586218379437923431396, -0.01186609203379699988001316768304604920558631420135, 0.56881042071212273292246663913829252123832702636719, -0.75614564389252247877948320819996297359466552734375, 0.27529538466888203718241356909857131540775299072266, 0.11720388769911527226952330238418653607368469238281, -0.03887280126882779185404359623134951107203960418701, -0.03466034684485348738025578541055438108742237091064, -0.0038832119991584900138559266480342557770200073719, -0.00325314276365318202216547760485809703823179006577,
-0.00325314276365318202216547760485809703823179006577, -0.0038832119991584900138559266480342557770200073719, -0.03466034684485348738025578541055438108742237091064, -0.03887280126882779185404359623134951107203960418701, 0.11720388769911527226952330238418653607368469238281, 0.27529538466888203718241356909857131540775299072266, -0.75614564389252247877948320819996297359466552734375, 0.56881042071212273292246663913829252123832702636719, -0.01186609203379699988001316768304604920558631420135, -0.10671180468666539853384023217586218379437923431396, -0.0238253847949202977873905950900734751485288143158, 0.01702522388155398858078370949442614801228046417236, 0.00543947593727411513042646618032449623569846153259, -0.00455689562847549130969460051687747181858867406845,
-0.00325314276365318202216547760485809703823179006577, -0.0038832119991584900138559266480342557770200073719, -0.03466034684485348738025578541055438108742237091064, -0.03887280126882779185404359623134951107203960418701, 0.11720388769911527226952330238418653607368469238281, 0.27529538466888203718241356909857131540775299072266, -0.75614564389252247877948320819996297359466552734375, 0.56881042071212273292246663913829252123832702636719, -0.01186609203379699988001316768304604920558631420135, -0.10671180468666539853384023217586218379437923431396, -0.0238253847949202977873905950900734751485288143158, 0.01702522388155398858078370949442614801228046417236, 0.00543947593727411513042646618032449623569846153259, -0.00455689562847549130969460051687747181858867406845,
-0.00455689562847549130969460051687747181858867406845, 0.00543947593727411513042646618032449623569846153259, 0.01702522388155398858078370949442614801228046417236, -0.0238253847949202977873905950900734751485288143158, -0.10671180468666539853384023217586218379437923431396, -0.01186609203379699988001316768304604920558631420135, 0.56881042071212273292246663913829252123832702636719, -0.75614564389252247877948320819996297359466552734375, 0.27529538466888203718241356909857131540775299072266, 0.11720388769911527226952330238418653607368469238281, -0.03887280126882779185404359623134951107203960418701, -0.03466034684485348738025578541055438108742237091064, -0.0038832119991584900138559266480342557770200073719, -0.00325314276365318202216547760485809703823179006577 };

//qshift_b_bp: 12 kernels, 14 each
const double qshift_b_bp_qshift[] = { 0.00325314276365318202216547760485809703823179006577, -0.0038832119991584900138559266480342557770200073719, 0.03466034684485348738025578541055438108742237091064, -0.03887280126882779185404359623134951107203960418701, -0.11720388769911527226952330238418653607368469238281, 0.27529538466888203718241356909857131540775299072266, 0.75614564389252247877948320819996297359466552734375, 0.56881042071212273292246663913829252123832702636719, 0.01186609203379699988001316768304604920558631420135, -0.10671180468666539853384023217586218379437923431396, 0.0238253847949202977873905950900734751485288143158, 0.01702522388155398858078370949442614801228046417236, -0.00543947593727411513042646618032449623569846153259, -0.00455689562847549130969460051687747181858867406845,
-0.00455689562847549130969460051687747181858867406845, -0.00543947593727411513042646618032449623569846153259, 0.01702522388155398858078370949442614801228046417236, 0.0238253847949202977873905950900734751485288143158, -0.10671180468666539853384023217586218379437923431396, 0.01186609203379699988001316768304604920558631420135, 0.56881042071212273292246663913829252123832702636719, 0.75614564389252247877948320819996297359466552734375, 0.27529538466888203718241356909857131540775299072266, -0.11720388769911527226952330238418653607368469238281, -0.03887280126882779185404359623134951107203960418701, 0.03466034684485348738025578541055438108742237091064, -0.0038832119991584900138559266480342557770200073719, 0.00325314276365318202216547760485809703823179006577,
-0.00455689562847549130969460051687747181858867406845, -0.00543947593727411513042646618032449623569846153259, 0.01702522388155398858078370949442614801228046417236, 0.0238253847949202977873905950900734751485288143158, -0.10671180468666539853384023217586218379437923431396, 0.01186609203379699988001316768304604920558631420135, 0.56881042071212273292246663913829252123832702636719, 0.75614564389252247877948320819996297359466552734375, 0.27529538466888203718241356909857131540775299072266, -0.11720388769911527226952330238418653607368469238281, -0.03887280126882779185404359623134951107203960418701, 0.03466034684485348738025578541055438108742237091064, -0.0038832119991584900138559266480342557770200073719, 0.00325314276365318202216547760485809703823179006577,
0.00325314276365318202216547760485809703823179006577, -0.0038832119991584900138559266480342557770200073719, 0.03466034684485348738025578541055438108742237091064, -0.03887280126882779185404359623134951107203960418701, -0.11720388769911527226952330238418653607368469238281, 0.27529538466888203718241356909857131540775299072266, 0.75614564389252247877948320819996297359466552734375, 0.56881042071212273292246663913829252123832702636719, 0.01186609203379699988001316768304604920558631420135, -0.10671180468666539853384023217586218379437923431396, 0.0238253847949202977873905950900734751485288143158, 0.01702522388155398858078370949442614801228046417236, -0.00543947593727411513042646618032449623569846153259, -0.00455689562847549130969460051687747181858867406845,
-0.00455689562847549130969460051687747181858867406845, 0.00543947593727411513042646618032449623569846153259, 0.01702522388155398858078370949442614801228046417236, -0.0238253847949202977873905950900734751485288143158, -0.10671180468666539853384023217586218379437923431396, -0.01186609203379699988001316768304604920558631420135, 0.56881042071212273292246663913829252123832702636719, -0.75614564389252247877948320819996297359466552734375, 0.27529538466888203718241356909857131540775299072266, 0.11720388769911527226952330238418653607368469238281, -0.03887280126882779185404359623134951107203960418701, -0.03466034684485348738025578541055438108742237091064, -0.0038832119991584900138559266480342557770200073719, -0.00325314276365318202216547760485809703823179006577,
-0.00325314276365318202216547760485809703823179006577, -0.0038832119991584900138559266480342557770200073719, -0.03466034684485348738025578541055438108742237091064, -0.03887280126882779185404359623134951107203960418701, 0.11720388769911527226952330238418653607368469238281, 0.27529538466888203718241356909857131540775299072266, -0.75614564389252247877948320819996297359466552734375, 0.56881042071212273292246663913829252123832702636719, -0.01186609203379699988001316768304604920558631420135, -0.10671180468666539853384023217586218379437923431396, -0.0238253847949202977873905950900734751485288143158, 0.01702522388155398858078370949442614801228046417236, 0.00543947593727411513042646618032449623569846153259, -0.00455689562847549130969460051687747181858867406845,
-0.00325314276365318202216547760485809703823179006577, -0.0038832119991584900138559266480342557770200073719, -0.03466034684485348738025578541055438108742237091064, -0.03887280126882779185404359623134951107203960418701, 0.11720388769911527226952330238418653607368469238281, 0.27529538466888203718241356909857131540775299072266, -0.75614564389252247877948320819996297359466552734375, 0.56881042071212273292246663913829252123832702636719, -0.01186609203379699988001316768304604920558631420135, -0.10671180468666539853384023217586218379437923431396, -0.0238253847949202977873905950900734751485288143158, 0.01702522388155398858078370949442614801228046417236, 0.00543947593727411513042646618032449623569846153259, -0.00455689562847549130969460051687747181858867406845,
-0.00455689562847549130969460051687747181858867406845, 0.00543947593727411513042646618032449623569846153259, 0.01702522388155398858078370949442614801228046417236, -0.0238253847949202977873905950900734751485288143158, -0.10671180468666539853384023217586218379437923431396, -0.01186609203379699988001316768304604920558631420135, 0.56881042071212273292246663913829252123832702636719, -0.75614564389252247877948320819996297359466552734375, 0.27529538466888203718241356909857131540775299072266, 0.11720388769911527226952330238418653607368469238281, -0.03887280126882779185404359623134951107203960418701, -0.03466034684485348738025578541055438108742237091064, -0.0038832119991584900138559266480342557770200073719, -0.00325314276365318202216547760485809703823179006577,
-2.43562670333119006224088798351345985793159343302250e-05, -9.59514305416110310775756886414455948397517204284668e-03, -2.54554351814245717611218111642301664687693119049072e-02, -2.63685613793658846226719560945639386773109436035156e-02, -7.62474758151247562071306518305391364265233278274536e-03, 2.62691880616686468385978514561429619789123535156250e-01, 4.36787385780317338745959432344534434378147125244141e-01, -8.38137840090472097109852711582789197564125061035156e-01, -4.47647940175082970082343081230646930634975433349609e-02, 1.73241472867427803716822154456167481839656829833984e-01, 6.14446533755928642195343059029255528002977371215820e-02, 2.10100577283097132708089560537700890563428401947021e-02, -4.32919303381105102443426879688104236265644431114197e-04, -2.77165349347536669674663123430491395993158221244812e-03,
-2.77165349347536669674663123430491395993158221244812e-03, -4.32919303381105102443426879688104236265644431114197e-04, 2.10100577283097132708089560537700890563428401947021e-02, 6.14446533755928642195343059029255528002977371215820e-02, 1.73241472867427803716822154456167481839656829833984e-01, -4.47647940175082970082343081230646930634975433349609e-02, -8.38137840090472097109852711582789197564125061035156e-01, 4.36787385780317338745959432344534434378147125244141e-01, 2.62691880616686468385978514561429619789123535156250e-01, -7.62474758151247562071306518305391364265233278274536e-03, -2.63685613793658846226719560945639386773109436035156e-02, -2.54554351814245717611218111642301664687693119049072e-02, -9.59514305416110310775756886414455948397517204284668e-03, -2.43562670333119006224088798351345985793159343302250e-05,
-2.77165349347536669674663123430491395993158221244812e-03, -4.32919303381105102443426879688104236265644431114197e-04, 2.10100577283097132708089560537700890563428401947021e-02, 6.14446533755928642195343059029255528002977371215820e-02, 1.73241472867427803716822154456167481839656829833984e-01, -4.47647940175082970082343081230646930634975433349609e-02, -8.38137840090472097109852711582789197564125061035156e-01, 4.36787385780317338745959432344534434378147125244141e-01, 2.62691880616686468385978514561429619789123535156250e-01, -7.62474758151247562071306518305391364265233278274536e-03, -2.63685613793658846226719560945639386773109436035156e-02, -2.54554351814245717611218111642301664687693119049072e-02, -9.59514305416110310775756886414455948397517204284668e-03, -2.43562670333119006224088798351345985793159343302250e-05,
-2.43562670333119006224088798351345985793159343302250e-05, -9.59514305416110310775756886414455948397517204284668e-03, -2.54554351814245717611218111642301664687693119049072e-02, -2.63685613793658846226719560945639386773109436035156e-02, -7.62474758151247562071306518305391364265233278274536e-03, 2.62691880616686468385978514561429619789123535156250e-01, 4.36787385780317338745959432344534434378147125244141e-01, -8.38137840090472097109852711582789197564125061035156e-01, -4.47647940175082970082343081230646930634975433349609e-02, 1.73241472867427803716822154456167481839656829833984e-01, 6.14446533755928642195343059029255528002977371215820e-02, 2.10100577283097132708089560537700890563428401947021e-02, -4.32919303381105102443426879688104236265644431114197e-04, -2.77165349347536669674663123430491395993158221244812e-03 };

//qshift_c: 8 kernels, 16 each
const double qshift_c_qshift[] = { -4.76161193845591346890389061741188925225287675857544e-03, -4.46022789262285159535975642697280818538274616003036e-04, -7.14419732796501205304706694221295038005337119102478e-05, 3.49146123068421951329831642851786455139517784118652e-02, -3.72738957998979617003421083154535153880715370178223e-02, -1.15911457427440758860548442044091643765568733215332e-01, 2.76368643133031721692560722658527083694934844970703e-01, 7.56393765199036671731391834327951073646545410156250e-01, 5.67134484100133007267174889420857653021812438964844e-01, 1.46374059644733493096291354618188051972538232803345e-02, -1.12558884257522029415099495963659137487411499023438e-01, 2.22892632669227097608199983369559049606323242187500e-02, 1.84986827241562477863734414995633414946496486663818e-02, -7.20267787825834646803224714517455140594393014907837e-03, -2.27652205897771795330489230657633470400469377636909e-04, 2.43034994514867508721978062169455370167270302772522e-03,
2.43034994514867508721978062169455370167270302772522e-03, -2.27652205897771795330489230657633470400469377636909e-04, -7.20267787825834646803224714517455140594393014907837e-03, 1.84986827241562477863734414995633414946496486663818e-02, 2.22892632669227097608199983369559049606323242187500e-02, -1.12558884257522029415099495963659137487411499023438e-01, 1.46374059644733493096291354618188051972538232803345e-02, 5.67134484100133007267174889420857653021812438964844e-01, 7.56393765199036671731391834327951073646545410156250e-01, 2.76368643133031721692560722658527083694934844970703e-01, -1.15911457427440758860548442044091643765568733215332e-01, -3.72738957998979617003421083154535153880715370178223e-02, 3.49146123068421951329831642851786455139517784118652e-02, -7.14419732796501205304706694221295038005337119102478e-05, -4.46022789262285159535975642697280818538274616003036e-04, -4.76161193845591346890389061741188925225287675857544e-03,
2.43034994514867508721978062169455370167270302772522e-03, -2.27652205897771795330489230657633470400469377636909e-04, -7.20267787825834646803224714517455140594393014907837e-03, 1.84986827241562477863734414995633414946496486663818e-02, 2.22892632669227097608199983369559049606323242187500e-02, -1.12558884257522029415099495963659137487411499023438e-01, 1.46374059644733493096291354618188051972538232803345e-02, 5.67134484100133007267174889420857653021812438964844e-01, 7.56393765199036671731391834327951073646545410156250e-01, 2.76368643133031721692560722658527083694934844970703e-01, -1.15911457427440758860548442044091643765568733215332e-01, -3.72738957998979617003421083154535153880715370178223e-02, 3.49146123068421951329831642851786455139517784118652e-02, -7.14419732796501205304706694221295038005337119102478e-05, -4.46022789262285159535975642697280818538274616003036e-04, -4.76161193845591346890389061741188925225287675857544e-03,
-4.76161193845591346890389061741188925225287675857544e-03, -4.46022789262285159535975642697280818538274616003036e-04, -7.14419732796501205304706694221295038005337119102478e-05, 3.49146123068421951329831642851786455139517784118652e-02, -3.72738957998979617003421083154535153880715370178223e-02, -1.15911457427440758860548442044091643765568733215332e-01, 2.76368643133031721692560722658527083694934844970703e-01, 7.56393765199036671731391834327951073646545410156250e-01, 5.67134484100133007267174889420857653021812438964844e-01, 1.46374059644733493096291354618188051972538232803345e-02, -1.12558884257522029415099495963659137487411499023438e-01, 2.22892632669227097608199983369559049606323242187500e-02, 1.84986827241562477863734414995633414946496486663818e-02, -7.20267787825834646803224714517455140594393014907837e-03, -2.27652205897771795330489230657633470400469377636909e-04, 2.43034994514867508721978062169455370167270302772522e-03,
2.43034994514867508721978062169455370167270302772522e-03, 2.27652205897771795330489230657633470400469377636909e-04, -7.20267787825834646803224714517455140594393014907837e-03, -1.84986827241562477863734414995633414946496486663818e-02, 2.22892632669227097608199983369559049606323242187500e-02, 1.12558884257522029415099495963659137487411499023438e-01, 1.46374059644733493096291354618188051972538232803345e-02, -5.67134484100133007267174889420857653021812438964844e-01, 7.56393765199036671731391834327951073646545410156250e-01, -2.76368643133031721692560722658527083694934844970703e-01, -1.15911457427440758860548442044091643765568733215332e-01, 3.72738957998979617003421083154535153880715370178223e-02, 3.49146123068421951329831642851786455139517784118652e-02, 7.14419732796501205304706694221295038005337119102478e-05, -4.46022789262285159535975642697280818538274616003036e-04, 4.76161193845591346890389061741188925225287675857544e-03,
4.76161193845591346890389061741188925225287675857544e-03, -4.46022789262285159535975642697280818538274616003036e-04, 7.14419732796501205304706694221295038005337119102478e-05, 3.49146123068421951329831642851786455139517784118652e-02, 3.72738957998979617003421083154535153880715370178223e-02, -1.15911457427440758860548442044091643765568733215332e-01, -2.76368643133031721692560722658527083694934844970703e-01, 7.56393765199036671731391834327951073646545410156250e-01, -5.67134484100133007267174889420857653021812438964844e-01, 1.46374059644733493096291354618188051972538232803345e-02, 1.12558884257522029415099495963659137487411499023438e-01, 2.22892632669227097608199983369559049606323242187500e-02, -1.84986827241562477863734414995633414946496486663818e-02, -7.20267787825834646803224714517455140594393014907837e-03, 2.27652205897771795330489230657633470400469377636909e-04, 2.43034994514867508721978062169455370167270302772522e-03,
4.76161193845591346890389061741188925225287675857544e-03, -4.46022789262285159535975642697280818538274616003036e-04, 7.14419732796501205304706694221295038005337119102478e-05, 3.49146123068421951329831642851786455139517784118652e-02, 3.72738957998979617003421083154535153880715370178223e-02, -1.15911457427440758860548442044091643765568733215332e-01, -2.76368643133031721692560722658527083694934844970703e-01, 7.56393765199036671731391834327951073646545410156250e-01, -5.67134484100133007267174889420857653021812438964844e-01, 1.46374059644733493096291354618188051972538232803345e-02, 1.12558884257522029415099495963659137487411499023438e-01, 2.22892632669227097608199983369559049606323242187500e-02, -1.84986827241562477863734414995633414946496486663818e-02, -7.20267787825834646803224714517455140594393014907837e-03, 2.27652205897771795330489230657633470400469377636909e-04, 2.43034994514867508721978062169455370167270302772522e-03,
2.43034994514867508721978062169455370167270302772522e-03, 2.27652205897771795330489230657633470400469377636909e-04, -7.20267787825834646803224714517455140594393014907837e-03, -1.84986827241562477863734414995633414946496486663818e-02, 2.22892632669227097608199983369559049606323242187500e-02, 1.12558884257522029415099495963659137487411499023438e-01, 1.46374059644733493096291354618188051972538232803345e-02, -5.67134484100133007267174889420857653021812438964844e-01, 7.56393765199036671731391834327951073646545410156250e-01, -2.76368643133031721692560722658527083694934844970703e-01, -1.15911457427440758860548442044091643765568733215332e-01, 3.72738957998979617003421083154535153880715370178223e-02, 3.49146123068421951329831642851786455139517784118652e-02, 7.14419732796501205304706694221295038005337119102478e-05, -4.46022789262285159535975642697280818538274616003036e-04, 4.76161193845591346890389061741188925225287675857544e-03 };

//qshift_d: 8 kernels, 18 each
const double qshift_d_qshift[] = { -0.00228412744027053091558365771618355211103335022926, 0.00120989416307344232331955069525974977295845746994, -0.01183479451543078576902789933456006110645830631256, 0.00128345699934439942679897939115107874386012554169, 0.04436522160661699604178309641611122060567140579224, -0.05327610880304726320710884124309814069420099258423, -0.11330588636214279640856972264373325742781162261963, 0.28090286322218649406323720540967769920825958251953, 0.75281603808785613196619124209973961114883422851562, 0.5658080673964587248292446020059287548065185546875, 0.02455015243366656316204021948124136542901396751404, -0.12018854471079482015838379993510898202657699584961, 0.01815649394554645287835903388895530952140688896179, 0.03152637712208464920715655921412690076977014541626, -0.00662879461243006274512312714364270505029708147049, -0.00257617430660079475140955551637489406857639551163, 0.00127755865380699815993248424916828298592008650303, 0.00241186945666627778825374939231096504954621195793,
0.00241186945666627778825374939231096504954621195793, 0.00127755865380699815993248424916828298592008650303, -0.00257617430660079475140955551637489406857639551163, -0.00662879461243006274512312714364270505029708147049, 0.03152637712208464920715655921412690076977014541626, 0.01815649394554645287835903388895530952140688896179, -0.12018854471079482015838379993510898202657699584961, 0.02455015243366656316204021948124136542901396751404, 0.5658080673964587248292446020059287548065185546875, 0.75281603808785613196619124209973961114883422851562, 0.28090286322218649406323720540967769920825958251953, -0.11330588636214279640856972264373325742781162261963, -0.05327610880304726320710884124309814069420099258423, 0.04436522160661699604178309641611122060567140579224, 0.00128345699934439942679897939115107874386012554169, -0.01183479451543078576902789933456006110645830631256, 0.00120989416307344232331955069525974977295845746994, -0.00228412744027053091558365771618355211103335022926,
0.00241186945666627778825374939231096504954621195793, 0.00127755865380699815993248424916828298592008650303, -0.00257617430660079475140955551637489406857639551163, -0.00662879461243006274512312714364270505029708147049, 0.03152637712208464920715655921412690076977014541626, 0.01815649394554645287835903388895530952140688896179, -0.12018854471079482015838379993510898202657699584961, 0.02455015243366656316204021948124136542901396751404, 0.5658080673964587248292446020059287548065185546875, 0.75281603808785613196619124209973961114883422851562, 0.28090286322218649406323720540967769920825958251953, -0.11330588636214279640856972264373325742781162261963, -0.05327610880304726320710884124309814069420099258423, 0.04436522160661699604178309641611122060567140579224, 0.00128345699934439942679897939115107874386012554169, -0.01183479451543078576902789933456006110645830631256, 0.00120989416307344232331955069525974977295845746994, -0.00228412744027053091558365771618355211103335022926,
-0.00228412744027053091558365771618355211103335022926, 0.00120989416307344232331955069525974977295845746994, -0.01183479451543078576902789933456006110645830631256, 0.00128345699934439942679897939115107874386012554169, 0.04436522160661699604178309641611122060567140579224, -0.05327610880304726320710884124309814069420099258423, -0.11330588636214279640856972264373325742781162261963, 0.28090286322218649406323720540967769920825958251953, 0.75281603808785613196619124209973961114883422851562, 0.5658080673964587248292446020059287548065185546875, 0.02455015243366656316204021948124136542901396751404, -0.12018854471079482015838379993510898202657699584961, 0.01815649394554645287835903388895530952140688896179, 0.03152637712208464920715655921412690076977014541626, -0.00662879461243006274512312714364270505029708147049, -0.00257617430660079475140955551637489406857639551163, 0.00127755865380699815993248424916828298592008650303, 0.00241186945666627778825374939231096504954621195793,
0.00241186945666627778825374939231096504954621195793, -0.00127755865380699815993248424916828298592008650303, -0.00257617430660079475140955551637489406857639551163, 0.00662879461243006274512312714364270505029708147049, 0.03152637712208464920715655921412690076977014541626, -0.01815649394554645287835903388895530952140688896179, -0.12018854471079482015838379993510898202657699584961, -0.02455015243366656316204021948124136542901396751404, 0.5658080673964587248292446020059287548065185546875, -0.75281603808785613196619124209973961114883422851562, 0.28090286322218649406323720540967769920825958251953, 0.11330588636214279640856972264373325742781162261963, -0.05327610880304726320710884124309814069420099258423, -0.04436522160661699604178309641611122060567140579224, 0.00128345699934439942679897939115107874386012554169, 0.01183479451543078576902789933456006110645830631256, 0.00120989416307344232331955069525974977295845746994, 0.00228412744027053091558365771618355211103335022926,
0.00228412744027053091558365771618355211103335022926, 0.00120989416307344232331955069525974977295845746994, 0.01183479451543078576902789933456006110645830631256, 0.00128345699934439942679897939115107874386012554169, -0.04436522160661699604178309641611122060567140579224, -0.05327610880304726320710884124309814069420099258423, 0.11330588636214279640856972264373325742781162261963, 0.28090286322218649406323720540967769920825958251953, -0.75281603808785613196619124209973961114883422851562, 0.5658080673964587248292446020059287548065185546875, -0.02455015243366656316204021948124136542901396751404, -0.12018854471079482015838379993510898202657699584961, -0.01815649394554645287835903388895530952140688896179, 0.03152637712208464920715655921412690076977014541626, 0.00662879461243006274512312714364270505029708147049, -0.00257617430660079475140955551637489406857639551163, -0.00127755865380699815993248424916828298592008650303, 0.00241186945666627778825374939231096504954621195793,
0.00228412744027053091558365771618355211103335022926, 0.00120989416307344232331955069525974977295845746994, 0.01183479451543078576902789933456006110645830631256, 0.00128345699934439942679897939115107874386012554169, -0.04436522160661699604178309641611122060567140579224, -0.05327610880304726320710884124309814069420099258423, 0.11330588636214279640856972264373325742781162261963, 0.28090286322218649406323720540967769920825958251953, -0.75281603808785613196619124209973961114883422851562, 0.5658080673964587248292446020059287548065185546875, -0.02455015243366656316204021948124136542901396751404, -0.12018854471079482015838379993510898202657699584961, -0.01815649394554645287835903388895530952140688896179, 0.03152637712208464920715655921412690076977014541626, 0.00662879461243006274512312714364270505029708147049, -0.00257617430660079475140955551637489406857639551163, -0.00127755865380699815993248424916828298592008650303, 0.00241186945666627778825374939231096504954621195793,
0.00241186945666627778825374939231096504954621195793, -0.00127755865380699815993248424916828298592008650303, -0.00257617430660079475140955551637489406857639551163, 0.00662879461243006274512312714364270505029708147049, 0.03152637712208464920715655921412690076977014541626, -0.01815649394554645287835903388895530952140688896179, -0.12018854471079482015838379993510898202657699584961, -0.02455015243366656316204021948124136542901396751404, 0.5658080673964587248292446020059287548065185546875, -0.75281603808785613196619124209973961114883422851562, 0.28090286322218649406323720540967769920825958251953, 0.11330588636214279640856972264373325742781162261963, -0.05327610880304726320710884124309814069420099258423, -0.04436522160661699604178309641611122060567140579224, 0.00128345699934439942679897939115107874386012554169, 0.01183479451543078576902789933456006110645830631256, 0.00120989416307344232331955069525974977295845746994, 0.00228412744027053091558365771618355211103335022926 };

//qshift_06: 8 kernels, 10 each
const double qshift_06_qshift[] = { 0.03516383657149473734859768114802136551588773727417, 0, -0.08832942445107284934469049630934023298323154449463, 0.23389032060723563555271198310947511345148086547852, 0.760272369066125719427873264066874980926513671875, 0.58751829772356045644698951946338638663291931152344, 0, -0.11430183714424872742920769042029860429465770721436, 0, 0,
0, 0, -0.11430183714424872742920769042029860429465770721436, 0, 0.58751829772356045644698951946338638663291931152344, 0.760272369066125719427873264066874980926513671875, 0.23389032060723563555271198310947511345148086547852, -0.08832942445107284934469049630934023298323154449463, 0, 0.03516383657149473734859768114802136551588773727417,
0, 0, -0.11430183714424872742920769042029860429465770721436, 0, 0.58751829772356045644698951946338638663291931152344, 0.760272369066125719427873264066874980926513671875, 0.23389032060723563555271198310947511345148086547852, -0.08832942445107284934469049630934023298323154449463, 0, 0.03516383657149473734859768114802136551588773727417,
0.03516383657149473734859768114802136551588773727417, 0, -0.08832942445107284934469049630934023298323154449463, 0.23389032060723563555271198310947511345148086547852, 0.760272369066125719427873264066874980926513671875, 0.58751829772356045644698951946338638663291931152344, 0, -0.11430183714424872742920769042029860429465770721436, 0, 0,
0, -0, -0.11430183714424872742920769042029860429465770721436, -0, 0.58751829772356045644698951946338638663291931152344, -0.760272369066125719427873264066874980926513671875, 0.23389032060723563555271198310947511345148086547852, 0.08832942445107284934469049630934023298323154449463, 0, -0.03516383657149473734859768114802136551588773727417,
-0.03516383657149473734859768114802136551588773727417, 0, 0.08832942445107284934469049630934023298323154449463, 0.23389032060723563555271198310947511345148086547852, -0.760272369066125719427873264066874980926513671875, 0.58751829772356045644698951946338638663291931152344, -0, -0.11430183714424872742920769042029860429465770721436, -0, 0,
-0.03516383657149473734859768114802136551588773727417, 0, 0.08832942445107284934469049630934023298323154449463, 0.23389032060723563555271198310947511345148086547852, -0.760272369066125719427873264066874980926513671875, 0.58751829772356045644698951946338638663291931152344, -0, -0.11430183714424872742920769042029860429465770721436, -0, 0,
0, -0, -0.11430183714424872742920769042029860429465770721436, -0, 0.58751829772356045644698951946338638663291931152344, -0.760272369066125719427873264066874980926513671875, 0.23389032060723563555271198310947511345148086547852, 0.08832942445107284934469049630934023298323154449463, 0, -0.03516383657149473734859768114802136551588773727417 };

//qshift_32: 8 kernels, 32 each
const double qshift_32_qshift[] = { -3.02986558716425002230065999242469843011349439620972e-04, 4.08383831797373864921181160769769746821111766621470e-06, 1.71054697130495277253292574215493004885502159595490e-04, 5.48739255398576980873870390098545613000169396400452e-04, -2.04631779823688140455134609752008145733270794153214e-04, -2.14719599241827967944784560927473648916929960250854e-03, 5.10959952392086485042921317756281496258452534675598e-04, 8.73565996132160717257963966630995855666697025299072e-03, -4.56675042841990248138062113980595313478261232376099e-03, -2.49082303932483574426814953994835377670824527740479e-02, 2.19692887610553160004922546022498863749206066131592e-02, 5.43965543404122120474397661382681690156459808349609e-02, -7.53113727011666816979484906369179952889680862426758e-02, -1.10307301050566727851354187350807478651404380798340e-01, 2.96444191118498567849570690668770112097263336181641e-01, 7.38923076932162303798179436853388324379920959472656e-01, 5.65896713231469838945031369803473353385925292968750e-01, 4.19943759511413328144868728486471809446811676025391e-02, -1.36524937191269124525661027291789650917053222656250e-01, 6.10372672566345583072822122971956559922546148300171e-03, 5.36211971691652120042270723843103041872382164001465e-02, -1.08175827745564303444814058252632094081491231918335e-02, -1.90237174370141808033007890799126471392810344696045e-02, 6.37283927476815174190116763952573819551616907119751e-03, 5.42573024540379984792526357750830356962978839874268e-03, -2.11006732539900914574770851572793617378920316696167e-03, -1.29401796520232947353135077861452373326756060123444e-03, 2.33420000188621170646163793804817032651044428348541e-04, 3.21361785817095735751786067524449208576697856187820e-04, -1.20604367072756846960938925672479626882704906165600e-04, 2.39368576586547325714795023121617134620464639738202e-06, 1.77591411897010830649515367163360224367352202534676e-04, 1.77591411897010830649515367163360224367352202534676e-04,
2.39368576586547325714795023121617134620464639738202e-06, -1.20604367072756846960938925672479626882704906165600e-04, 3.21361785817095735751786067524449208576697856187820e-04, 2.33420000188621170646163793804817032651044428348541e-04, -1.29401796520232947353135077861452373326756060123444e-03, -2.11006732539900914574770851572793617378920316696167e-03, 5.42573024540379984792526357750830356962978839874268e-03, 6.37283927476815174190116763952573819551616907119751e-03, -1.90237174370141808033007890799126471392810344696045e-02, -1.08175827745564303444814058252632094081491231918335e-02, 5.36211971691652120042270723843103041872382164001465e-02, 6.10372672566345583072822122971956559922546148300171e-03, -1.36524937191269124525661027291789650917053222656250e-01, 4.19943759511413328144868728486471809446811676025391e-02, 5.65896713231469838945031369803473353385925292968750e-01, 7.38923076932162303798179436853388324379920959472656e-01, 2.96444191118498567849570690668770112097263336181641e-01, -1.10307301050566727851354187350807478651404380798340e-01, -7.53113727011666816979484906369179952889680862426758e-02, 5.43965543404122120474397661382681690156459808349609e-02, 2.19692887610553160004922546022498863749206066131592e-02, -2.49082303932483574426814953994835377670824527740479e-02, -4.56675042841990248138062113980595313478261232376099e-03, 8.73565996132160717257963966630995855666697025299072e-03, 5.10959952392086485042921317756281496258452534675598e-04, -2.14719599241827967944784560927473648916929960250854e-03, -2.04631779823688140455134609752008145733270794153214e-04, 5.48739255398576980873870390098545613000169396400452e-04, 1.71054697130495277253292574215493004885502159595490e-04, 4.08383831797373864921181160769769746821111766621470e-06, -3.02986558716425002230065999242469843011349439620972e-04,
1.77591411897010830649515367163360224367352202534676e-04, 2.39368576586547325714795023121617134620464639738202e-06, -1.20604367072756846960938925672479626882704906165600e-04, 3.21361785817095735751786067524449208576697856187820e-04, 2.33420000188621170646163793804817032651044428348541e-04, -1.29401796520232947353135077861452373326756060123444e-03, -2.11006732539900914574770851572793617378920316696167e-03, 5.42573024540379984792526357750830356962978839874268e-03, 6.37283927476815174190116763952573819551616907119751e-03, -1.90237174370141808033007890799126471392810344696045e-02, -1.08175827745564303444814058252632094081491231918335e-02, 5.36211971691652120042270723843103041872382164001465e-02, 6.10372672566345583072822122971956559922546148300171e-03, -1.36524937191269124525661027291789650917053222656250e-01, 4.19943759511413328144868728486471809446811676025391e-02, 5.65896713231469838945031369803473353385925292968750e-01, 7.38923076932162303798179436853388324379920959472656e-01, 2.96444191118498567849570690668770112097263336181641e-01, -1.10307301050566727851354187350807478651404380798340e-01, -7.53113727011666816979484906369179952889680862426758e-02, 5.43965543404122120474397661382681690156459808349609e-02, 2.19692887610553160004922546022498863749206066131592e-02, -2.49082303932483574426814953994835377670824527740479e-02, -4.56675042841990248138062113980595313478261232376099e-03, 8.73565996132160717257963966630995855666697025299072e-03, 5.10959952392086485042921317756281496258452534675598e-04, -2.14719599241827967944784560927473648916929960250854e-03, -2.04631779823688140455134609752008145733270794153214e-04, 5.48739255398576980873870390098545613000169396400452e-04, 1.71054697130495277253292574215493004885502159595490e-04, 4.08383831797373864921181160769769746821111766621470e-06, -3.02986558716425002230065999242469843011349439620972e-04,
-3.02986558716425002230065999242469843011349439620972e-04, 4.08383831797373864921181160769769746821111766621470e-06, 1.71054697130495277253292574215493004885502159595490e-04, 5.48739255398576980873870390098545613000169396400452e-04, -2.04631779823688140455134609752008145733270794153214e-04, -2.14719599241827967944784560927473648916929960250854e-03, 5.10959952392086485042921317756281496258452534675598e-04, 8.73565996132160717257963966630995855666697025299072e-03, -4.56675042841990248138062113980595313478261232376099e-03, -2.49082303932483574426814953994835377670824527740479e-02, 2.19692887610553160004922546022498863749206066131592e-02, 5.43965543404122120474397661382681690156459808349609e-02, -7.53113727011666816979484906369179952889680862426758e-02, -1.10307301050566727851354187350807478651404380798340e-01, 2.96444191118498567849570690668770112097263336181641e-01, 7.38923076932162303798179436853388324379920959472656e-01, 5.65896713231469838945031369803473353385925292968750e-01, 4.19943759511413328144868728486471809446811676025391e-02, -1.36524937191269124525661027291789650917053222656250e-01, 6.10372672566345583072822122971956559922546148300171e-03, 5.36211971691652120042270723843103041872382164001465e-02, -1.08175827745564303444814058252632094081491231918335e-02, -1.90237174370141808033007890799126471392810344696045e-02, 6.37283927476815174190116763952573819551616907119751e-03, 5.42573024540379984792526357750830356962978839874268e-03, -2.11006732539900914574770851572793617378920316696167e-03, -1.29401796520232947353135077861452373326756060123444e-03, 2.33420000188621170646163793804817032651044428348541e-04, 3.21361785817095735751786067524449208576697856187820e-04, -1.20604367072756846960938925672479626882704906165600e-04, 2.39368576586547325714795023121617134620464639738202e-06, 1.77591411897010830649515367163360224367352202534676e-04,
1.77591411897010830649515367163360224367352202534676e-04, -2.39368576586547325714795023121617134620464639738202e-06, -1.20604367072756846960938925672479626882704906165600e-04, -3.21361785817095735751786067524449208576697856187820e-04, 2.33420000188621170646163793804817032651044428348541e-04, 1.29401796520232947353135077861452373326756060123444e-03, -2.11006732539900914574770851572793617378920316696167e-03, -5.42573024540379984792526357750830356962978839874268e-03, 6.37283927476815174190116763952573819551616907119751e-03, 1.90237174370141808033007890799126471392810344696045e-02, -1.08175827745564303444814058252632094081491231918335e-02, -5.36211971691652120042270723843103041872382164001465e-02, 6.10372672566345583072822122971956559922546148300171e-03, 1.36524937191269124525661027291789650917053222656250e-01, 4.19943759511413328144868728486471809446811676025391e-02, -5.65896713231469838945031369803473353385925292968750e-01, 7.38923076932162303798179436853388324379920959472656e-01, -2.96444191118498567849570690668770112097263336181641e-01, -1.10307301050566727851354187350807478651404380798340e-01, 7.53113727011666816979484906369179952889680862426758e-02, 5.43965543404122120474397661382681690156459808349609e-02, -2.19692887610553160004922546022498863749206066131592e-02, -2.49082303932483574426814953994835377670824527740479e-02, 4.56675042841990248138062113980595313478261232376099e-03, 8.73565996132160717257963966630995855666697025299072e-03, -5.10959952392086485042921317756281496258452534675598e-04, -2.14719599241827967944784560927473648916929960250854e-03, 2.04631779823688140455134609752008145733270794153214e-04, 5.48739255398576980873870390098545613000169396400452e-04, -1.71054697130495277253292574215493004885502159595490e-04, 4.08383831797373864921181160769769746821111766621470e-06, 3.02986558716425002230065999242469843011349439620972e-04,
3.02986558716425002230065999242469843011349439620972e-04, 4.08383831797373864921181160769769746821111766621470e-06, -1.71054697130495277253292574215493004885502159595490e-04, 5.48739255398576980873870390098545613000169396400452e-04, 2.04631779823688140455134609752008145733270794153214e-04, -2.14719599241827967944784560927473648916929960250854e-03, -5.10959952392086485042921317756281496258452534675598e-04, 8.73565996132160717257963966630995855666697025299072e-03, 4.56675042841990248138062113980595313478261232376099e-03, -2.49082303932483574426814953994835377670824527740479e-02, -2.19692887610553160004922546022498863749206066131592e-02, 5.43965543404122120474397661382681690156459808349609e-02, 7.53113727011666816979484906369179952889680862426758e-02, -1.10307301050566727851354187350807478651404380798340e-01, -2.96444191118498567849570690668770112097263336181641e-01, 7.38923076932162303798179436853388324379920959472656e-01, -5.65896713231469838945031369803473353385925292968750e-01, 4.19943759511413328144868728486471809446811676025391e-02, 1.36524937191269124525661027291789650917053222656250e-01, 6.10372672566345583072822122971956559922546148300171e-03, -5.36211971691652120042270723843103041872382164001465e-02, -1.08175827745564303444814058252632094081491231918335e-02, 1.90237174370141808033007890799126471392810344696045e-02, 6.37283927476815174190116763952573819551616907119751e-03, -5.42573024540379984792526357750830356962978839874268e-03, -2.11006732539900914574770851572793617378920316696167e-03, 1.29401796520232947353135077861452373326756060123444e-03, 2.33420000188621170646163793804817032651044428348541e-04, -3.21361785817095735751786067524449208576697856187820e-04, -1.20604367072756846960938925672479626882704906165600e-04, -2.39368576586547325714795023121617134620464639738202e-06, 1.77591411897010830649515367163360224367352202534676e-04,
3.02986558716425002230065999242469843011349439620972e-04, 4.08383831797373864921181160769769746821111766621470e-06, -1.71054697130495277253292574215493004885502159595490e-04, 5.48739255398576980873870390098545613000169396400452e-04, 2.04631779823688140455134609752008145733270794153214e-04, -2.14719599241827967944784560927473648916929960250854e-03, -5.10959952392086485042921317756281496258452534675598e-04, 8.73565996132160717257963966630995855666697025299072e-03, 4.56675042841990248138062113980595313478261232376099e-03, -2.49082303932483574426814953994835377670824527740479e-02, -2.19692887610553160004922546022498863749206066131592e-02, 5.43965543404122120474397661382681690156459808349609e-02, 7.53113727011666816979484906369179952889680862426758e-02, -1.10307301050566727851354187350807478651404380798340e-01, -2.96444191118498567849570690668770112097263336181641e-01, 7.38923076932162303798179436853388324379920959472656e-01, -5.65896713231469838945031369803473353385925292968750e-01, 4.19943759511413328144868728486471809446811676025391e-02, 1.36524937191269124525661027291789650917053222656250e-01, 6.10372672566345583072822122971956559922546148300171e-03, -5.36211971691652120042270723843103041872382164001465e-02, -1.08175827745564303444814058252632094081491231918335e-02, 1.90237174370141808033007890799126471392810344696045e-02, 6.37283927476815174190116763952573819551616907119751e-03, -5.42573024540379984792526357750830356962978839874268e-03, -2.11006732539900914574770851572793617378920316696167e-03, 1.29401796520232947353135077861452373326756060123444e-03, 2.33420000188621170646163793804817032651044428348541e-04, -3.21361785817095735751786067524449208576697856187820e-04, -1.20604367072756846960938925672479626882704906165600e-04, -2.39368576586547325714795023121617134620464639738202e-06, 1.77591411897010830649515367163360224367352202534676e-04,
1.77591411897010830649515367163360224367352202534676e-04, -2.39368576586547325714795023121617134620464639738202e-06, -1.20604367072756846960938925672479626882704906165600e-04, -3.21361785817095735751786067524449208576697856187820e-04, 2.33420000188621170646163793804817032651044428348541e-04, 1.29401796520232947353135077861452373326756060123444e-03, -2.11006732539900914574770851572793617378920316696167e-03, -5.42573024540379984792526357750830356962978839874268e-03, 6.37283927476815174190116763952573819551616907119751e-03, 1.90237174370141808033007890799126471392810344696045e-02, -1.08175827745564303444814058252632094081491231918335e-02, -5.36211971691652120042270723843103041872382164001465e-02, 6.10372672566345583072822122971956559922546148300171e-03, 1.36524937191269124525661027291789650917053222656250e-01, 4.19943759511413328144868728486471809446811676025391e-02, -5.65896713231469838945031369803473353385925292968750e-01, 7.38923076932162303798179436853388324379920959472656e-01, -2.96444191118498567849570690668770112097263336181641e-01, -1.10307301050566727851354187350807478651404380798340e-01, 7.53113727011666816979484906369179952889680862426758e-02, 5.43965543404122120474397661382681690156459808349609e-02, -2.19692887610553160004922546022498863749206066131592e-02, -2.49082303932483574426814953994835377670824527740479e-02, 4.56675042841990248138062113980595313478261232376099e-03, 8.73565996132160717257963966630995855666697025299072e-03, -5.10959952392086485042921317756281496258452534675598e-04, -2.14719599241827967944784560927473648916929960250854e-03, 2.04631779823688140455134609752008145733270794153214e-04, 5.48739255398576980873870390098545613000169396400452e-04, -1.71054697130495277253292574215493004885502159595490e-04, 4.08383831797373864921181160769769746821111766621470e-06, 3.02986558716425002230065999242469843011349439620972e-04 };

enum biort
{
	DEFAULT_BIORT = 1,
	NEAR_SYM_A_BIORT = 1,
	NEAR_SYM_B_BIORT = 2,
	NEAR_SYM_B_BP_BIORT = 3,
	ANTONINI_BIORT = 4,
	LEGALL_BIORT = 5
};

enum qshift
{
	DEFAULT_QSHIFT = 1,
	QSHIFT_A_QSHIFT = 1,
	QSHIFT_B_QSHIFT = 2,
	QSHIFT_B_BP_QSHIFT = 3,
	QSHIFT_C_QSHIFT = 4,
	QSHIFT_D_QSHIFT = 5,
	QSHIFT_06_QSHIFT = 6,
	QSHIFT_32_QSHIFT = 7
};



class DTCWT2d
{
public:
	DTCWT2d(int _b = biort::DEFAULT_BIORT, int _q = qshift::DEFAULT_QSHIFT)
	{
		switch (_b)
		{
		case(biort::NEAR_SYM_A_BIORT) :
			biortSize = 4;
			_h0o = cv::Mat(5, 1, CV_64F, (void*)(near_sym_a_biort));
			_g0o = cv::Mat(7, 1, CV_64F, (void*)(near_sym_a_biort + 5));
			_h1o = cv::Mat(7, 1, CV_64F, (void*)(near_sym_a_biort + 5 + 7));
			_g1o = cv::Mat(5, 1, CV_64F, (void*)(near_sym_a_biort + 5 + 7 + 7));
			break;
		case(biort::NEAR_SYM_B_BIORT) :
			biortSize = 4;
			_h0o = cv::Mat(13, 1, CV_64F, (void*)(near_sym_b_biort));
			_g0o = cv::Mat(19, 1, CV_64F, (void*)(near_sym_b_biort + 13));
			_h1o = cv::Mat(19, 1, CV_64F, (void*)(near_sym_b_biort + 13 + 19));
			_g1o = cv::Mat(13, 1, CV_64F, (void*)(near_sym_b_biort + 13 + 19 + 19));
			break;
		case(biort::NEAR_SYM_B_BP_BIORT) :
			biortSize = 6;
			_h0o = cv::Mat(13, 1, CV_64F, (void*)(near_sym_b_bp_biort));
			_g0o = cv::Mat(19, 1, CV_64F, (void*)(near_sym_b_bp_biort + 13));
			_h1o = cv::Mat(19, 1, CV_64F, (void*)(near_sym_b_bp_biort + 13 + 19));
			_g1o = cv::Mat(13, 1, CV_64F, (void*)(near_sym_b_bp_biort + 13 + 19 + 19));
			_h2o = cv::Mat(19, 1, CV_64F, (void*)(near_sym_b_bp_biort + 13 + 19 + 19 + 13));
			_g2o = cv::Mat(19, 1, CV_64F, (void*)(near_sym_b_bp_biort + 13 + 19 + 19 + 13 + 19));
			break;
		case(biort::ANTONINI_BIORT) :
			biortSize = 4;
			_h0o = cv::Mat(9, 1, CV_64F, (void*)(antonini_biort));
			_g0o = cv::Mat(7, 1, CV_64F, (void*)(antonini_biort + 9));
			_h1o = cv::Mat(7, 1, CV_64F, (void*)(antonini_biort + 9 + 7));
			_g1o = cv::Mat(9, 1, CV_64F, (void*)(antonini_biort + 9 + 7 + 7));
			break;
		case(biort::LEGALL_BIORT) :
			biortSize = 4;
			_h0o = cv::Mat(5, 1, CV_64F, (void*)(legall_biort));
			_g0o = cv::Mat(3, 1, CV_64F, (void*)(legall_biort + 5));
			_h1o = cv::Mat(3, 1, CV_64F, (void*)(legall_biort + 5 + 3));
			_g1o = cv::Mat(5, 1, CV_64F, (void*)(legall_biort + 5 + 3 + 3));
			break;
		default:
			CV_Assert(_b != _b && "MUST SELECT A VALID BIORT");
		}

		switch (_q)
		{
		case(qshift::QSHIFT_A_QSHIFT) :
			qshiftSize = 8;
			_h0a = cv::Mat(10, 1, CV_64F, (void*)(qshift_a_qshift));
			_h0b = cv::Mat(10, 1, CV_64F, (void*)(qshift_a_qshift + 1 * 10));
			_g0a = cv::Mat(10, 1, CV_64F, (void*)(qshift_a_qshift + 2 * 10));
			_g0b = cv::Mat(10, 1, CV_64F, (void*)(qshift_a_qshift + 3 * 10));
			_h1a = cv::Mat(10, 1, CV_64F, (void*)(qshift_a_qshift + 4 * 10));
			_h1b = cv::Mat(10, 1, CV_64F, (void*)(qshift_a_qshift + 5 * 10));
			_g1a = cv::Mat(10, 1, CV_64F, (void*)(qshift_a_qshift + 6 * 10));
			_g1b = cv::Mat(10, 1, CV_64F, (void*)(qshift_a_qshift + 7 * 10));
			break;
		case(qshift::QSHIFT_B_QSHIFT) :
			qshiftSize = 8;
			_h0a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_qshift));
			_h0b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_qshift + 1 * 14));
			_g0a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_qshift + 2 * 14));
			_g0b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_qshift + 3 * 14));
			_h1a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_qshift + 4 * 14));
			_h1b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_qshift + 5 * 14));
			_g1a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_qshift + 6 * 14));
			_g1b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_qshift + 7 * 14));
			break;
		case(qshift::QSHIFT_B_BP_QSHIFT) :
			qshiftSize = 12;
			_h0a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift));
			_h0b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 1 * 14));
			_g0a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 2 * 14));
			_g0b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 3 * 14));
			_h1a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 4 * 14));
			_h1b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 5 * 14));
			_g1a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 6 * 14));
			_g1b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 7 * 14));
			_h2a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 8 * 14));
			_h2b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 9 * 14));
			_g2a = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 8 * 14));
			_g2b = cv::Mat(14, 1, CV_64F, (void*)(qshift_b_bp_qshift + 9 * 14));
			break;
		case(qshift::QSHIFT_C_QSHIFT) :
			qshiftSize = 8;
			_h0a = cv::Mat(16, 1, CV_64F, (void*)(qshift_c_qshift));
			_h0b = cv::Mat(16, 1, CV_64F, (void*)(qshift_c_qshift + 1 * 16));
			_g0a = cv::Mat(16, 1, CV_64F, (void*)(qshift_c_qshift + 2 * 16));
			_g0b = cv::Mat(16, 1, CV_64F, (void*)(qshift_c_qshift + 3 * 16));
			_h1a = cv::Mat(16, 1, CV_64F, (void*)(qshift_c_qshift + 4 * 16));
			_h1b = cv::Mat(16, 1, CV_64F, (void*)(qshift_c_qshift + 5 * 16));
			_g1a = cv::Mat(16, 1, CV_64F, (void*)(qshift_c_qshift + 6 * 16));
			_g1b = cv::Mat(16, 1, CV_64F, (void*)(qshift_c_qshift + 7 * 16));
			break;
		case(qshift::QSHIFT_D_QSHIFT) :
			qshiftSize = 8;
			_h0a = cv::Mat(19, 1, CV_64F, (void*)(qshift_d_qshift));
			_h0b = cv::Mat(19, 1, CV_64F, (void*)(qshift_d_qshift + 1 * 19));
			_g0a = cv::Mat(19, 1, CV_64F, (void*)(qshift_d_qshift + 2 * 19));
			_g0b = cv::Mat(19, 1, CV_64F, (void*)(qshift_d_qshift + 3 * 19));
			_h1a = cv::Mat(19, 1, CV_64F, (void*)(qshift_d_qshift + 4 * 19));
			_h1b = cv::Mat(19, 1, CV_64F, (void*)(qshift_d_qshift + 5 * 19));
			_g1a = cv::Mat(19, 1, CV_64F, (void*)(qshift_d_qshift + 6 * 19));
			_g1b = cv::Mat(19, 1, CV_64F, (void*)(qshift_d_qshift + 7 * 19));
			break;
		case(qshift::QSHIFT_06_QSHIFT) :
			qshiftSize = 8;
			_h0a = cv::Mat(10, 1, CV_64F, (void*)(qshift_06_qshift));
			_h0b = cv::Mat(10, 1, CV_64F, (void*)(qshift_06_qshift + 1 * 10));
			_g0a = cv::Mat(10, 1, CV_64F, (void*)(qshift_06_qshift + 2 * 10));
			_g0b = cv::Mat(10, 1, CV_64F, (void*)(qshift_06_qshift + 3 * 10));
			_h1a = cv::Mat(10, 1, CV_64F, (void*)(qshift_06_qshift + 4 * 10));
			_h1b = cv::Mat(10, 1, CV_64F, (void*)(qshift_06_qshift + 5 * 10));
			_g1a = cv::Mat(10, 1, CV_64F, (void*)(qshift_06_qshift + 6 * 10));
			_g1b = cv::Mat(10, 1, CV_64F, (void*)(qshift_06_qshift + 7 * 10));
			break;
		case(qshift::QSHIFT_32_QSHIFT) :
			qshiftSize = 8;
			_h0a = cv::Mat(32, 1, CV_64F, (void*)(qshift_32_qshift));
			_h0b = cv::Mat(32, 1, CV_64F, (void*)(qshift_32_qshift + 1 * 32));
			_g0a = cv::Mat(32, 1, CV_64F, (void*)(qshift_32_qshift + 2 * 32));
			_g0b = cv::Mat(32, 1, CV_64F, (void*)(qshift_32_qshift + 3 * 32));
			_h1a = cv::Mat(32, 1, CV_64F, (void*)(qshift_32_qshift + 4 * 32));
			_h1b = cv::Mat(32, 1, CV_64F, (void*)(qshift_32_qshift + 5 * 32));
			_g1a = cv::Mat(32, 1, CV_64F, (void*)(qshift_32_qshift + 6 * 32));
			_g1b = cv::Mat(32, 1, CV_64F, (void*)(qshift_32_qshift + 7 * 32));
			break;
		default:
			CV_Assert(_q != _q && "MUST SELECT A VALID QSHIFT");
		}
	}

	DTCWT2d(const DTCWT2d& other)
	{
		Y1 = other.Y1.clone();
		Yh.resize(other.Yh.size());
		for (int i = 0; i<Yh.size(); ++i)
		{
			Yh[i].resize(other.Yh[i].size());
			for (int j = 0; j<Yh[i].size(); ++j)
				Yh[i][j] = other.Yh[i][j].clone();
		}

		Yscale.resize(other.Yscale.size());
		for (int i = 0; i<Yscale.size(); ++i)
		{
			Yscale[i] = other.Yscale[i].clone();
		}

		biortSize = other.biortSize;
		other._h0o.copyTo(_h0o);
		other._g0o.copyTo(_g0o);
		other._h1o.copyTo(_h1o);
		other._g1o.copyTo(_g1o);
		other._h2o.copyTo(_h2o);
		other._g2o.copyTo(_g2o);

		qshiftSize = other.qshiftSize;
		other._h0a.copyTo(_h0a);
		other._h0b.copyTo(_h0b);
		other._g0a.copyTo(_g0a);
		other._g0b.copyTo(_g0b);
		other._h1a.copyTo(_h1a);
		other._h1b.copyTo(_h1b);
		other._g1a.copyTo(_g1a);
		other._g1b.copyTo(_g1b);
		other._h2a.copyTo(_h2a);
		other._h2b.copyTo(_h2b);
		other._g2a.copyTo(_g2a);
		other._g2b.copyTo(_g2b);
	}

private:
	cv::Mat ifilt(cv::InputArray _src, cv::InputArray _kernelA, cv::InputArray _kernelB)
	{
		cv::Mat src = _src.getMat();
		cv::Mat kernelA = _kernelA.getMat();
		cv::Mat kernelB = _kernelB.getMat();
		cv::Mat kernelH(1, 1, CV_MAKETYPE(src.depth(), 1));
		kernelH.setTo(1);

		CV_Assert(src.type() == kernelA.type() && kernelA.type() == kernelB.type());
		CV_Assert(src.rows % 2 == 0);
		CV_Assert(kernelA.rows == kernelB.rows && kernelA.cols == kernelB.cols);
		CV_Assert(kernelA.cols == 1 && kernelA.rows % 2 == 0);
		int m = kernelA.rows;
		int m2 = m / 2;
		cv::Mat kA[2], kB[2];
		cv::Mat tempA(kernelA.rows / 2, 1, CV_MAKETYPE(src.depth(), 2), kernelA.data);
		cv::Mat tempB(kernelB.rows / 2, 1, CV_MAKETYPE(src.depth(), 2), kernelB.data);
		cv::split(tempA, kA);
		cv::split(tempB, kB);
		cv::flip(kA[0], kA[0], 0);
		cv::flip(kA[1], kA[1], 0);
		cv::flip(kB[0], kB[0], 0);
		cv::flip(kB[1], kB[1], 0);

		cv::Mat reflectMap(src.rows, 1, CV_16U);
		for (int j = 0; j < src.rows; ++j)
			reflectMap.at<ushort>(j) = j;
		cv::copyMakeBorder(reflectMap, reflectMap, m2, m2, 0, 0, cv::BORDER_REFLECT);


		cv::Mat t[4];
		cv::Mat dst(src.rows * 2, src.cols, CV_MAKETYPE(src.depth(), 1));
		dst.setTo(0);
		double min, max;
		cv::minMaxIdx(src, &min, &max);
		if (min == max && min == 0)
			return dst;

		if (m2 % 2 == 0)
		{
			t[0].create(cvCeil(((src.rows + m) - 3) / 2.0), src.cols, src.type());
			t[1].create(cvCeil(((src.rows + m) - 3) / 2.0), src.cols, src.type());
			t[2].create(cvCeil(((src.rows + m) - 3) / 2.0), src.cols, src.type());
			t[3].create(cvCeil(((src.rows + m) - 3) / 2.0), src.cols, src.type());
			cv::Mat tempKernel;
			cv::multiply(kernelA, kernelB, tempKernel);
			if (cv::sum(tempKernel)(0) > 0)
			{
				for (int i = 3, j = 0; i < (src.rows + m); i += 2, ++j)
				{
					src.row(reflectMap.at<ushort>(i - 3)).copyTo(t[0].row(j));
					src.row(reflectMap.at<ushort>(i - 2)).copyTo(t[1].row(j));
					src.row(reflectMap.at<ushort>(i - 1)).copyTo(t[2].row(j));
					src.row(reflectMap.at<ushort>(i)).copyTo(t[3].row(j));
				}
			}
			else
			{
				for (int i = 3, j = 0; i < (src.rows + m); i += 2, ++j)
				{
					src.row(reflectMap.at<ushort>(i - 2)).copyTo(t[0].row(j));
					src.row(reflectMap.at<ushort>(i - 3)).copyTo(t[1].row(j));
					src.row(reflectMap.at<ushort>(i)).copyTo(t[2].row(j));
					src.row(reflectMap.at<ushort>(i - 1)).copyTo(t[3].row(j));
				}
			}
			cv::sepFilter2D(t[0], t[0], CV_MAKETYPE(src.depth(), 1), kernelH, kA[1], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
			cv::sepFilter2D(t[1], t[1], CV_MAKETYPE(src.depth(), 1), kernelH, kB[1], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
			cv::sepFilter2D(t[2], t[2], CV_MAKETYPE(src.depth(), 1), kernelH, kA[0], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
			cv::sepFilter2D(t[3], t[3], CV_MAKETYPE(src.depth(), 1), kernelH, kB[0], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
		}
		else
		{
			t[0].create(cvCeil(((src.rows + m) - 2) / 2.0), src.cols, src.type());
			t[1].create(cvCeil(((src.rows + m) - 2) / 2.0), src.cols, src.type());
			t[2].create(cvCeil(((src.rows + m) - 2) / 2.0), src.cols, src.type());
			t[3].create(cvCeil(((src.rows + m) - 2) / 2.0), src.cols, src.type());
			cv::Mat tempKernel;
			cv::multiply(kernelA, kernelB, tempKernel);
			if (cv::sum(tempKernel)(0) > 0)
			{
				for (int i = 2, j = 0; i < (src.rows + m - 1); i += 2, ++j)
				{
					src.row(reflectMap.at<ushort>(i - 1)).copyTo(t[0].row(j));
					src.row(reflectMap.at<ushort>(i)).copyTo(t[1].row(j));
				}
				t[0].copyTo(t[2]);
				t[1].copyTo(t[3]);
			}
			else
			{
				for (int i = 2, j = 0; i < (src.rows + m - 1); i += 2, ++j)
				{
					src.row(reflectMap.at<ushort>(i)).copyTo(t[0].row(j));
					src.row(reflectMap.at<ushort>(i - 1)).copyTo(t[1].row(j));
				}
				t[0].copyTo(t[2]);
				t[1].copyTo(t[3]);
			}
			cv::sepFilter2D(t[0], t[0], CV_MAKETYPE(src.depth(), 1), kernelH, kA[0], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
			cv::sepFilter2D(t[1], t[1], CV_MAKETYPE(src.depth(), 1), kernelH, kB[0], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
			cv::sepFilter2D(t[2], t[2], CV_MAKETYPE(src.depth(), 1), kernelH, kA[1], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
			cv::sepFilter2D(t[3], t[3], CV_MAKETYPE(src.depth(), 1), kernelH, kB[1], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
		}

		for (int r = 0, tr = 0; r < dst.rows; r += 4, tr++)
		{
			t[0].row(tr).copyTo(dst.row(r));
			t[1].row(tr).copyTo(dst.row(r + 1));
			t[2].row(tr).copyTo(dst.row(r + 2));
			t[3].row(tr).copyTo(dst.row(r + 3));
		}
		return dst;
	}

	cv::Mat dfilt(cv::InputArray _src, cv::InputArray _kernelA, cv::InputArray _kernelB)
	{
		cv::Mat src = _src.getMat();
		cv::Mat kernelA = _kernelA.getMat();
		cv::Mat kernelB = _kernelB.getMat();
		cv::Mat kernelH(1, 1, CV_MAKETYPE(src.depth(), 1));
		kernelH.setTo(1);

		CV_Assert(src.type() == kernelA.type() && kernelA.type() == kernelB.type());
		CV_Assert(src.rows % 4 == 0);
		CV_Assert(kernelA.rows == kernelB.rows && kernelA.cols == kernelB.cols);
		CV_Assert(kernelA.cols == 1 && kernelA.rows % 2 == 0);
		int m = kernelA.cols;
		int m2 = (int)m / 2;
		cv::Mat kA[2], kB[2];
		cv::Mat tempA(kernelA.rows / 2, 1, CV_MAKETYPE(src.depth(), 2), kernelA.data);
		cv::Mat tempB(kernelB.rows / 2, 1, CV_MAKETYPE(src.depth(), 2), kernelB.data);
		cv::split(tempA, kA);
		cv::split(tempB, kB);
		cv::flip(kA[0], kA[0], 0);
		cv::flip(kA[1], kA[1], 0);
		cv::flip(kB[0], kB[0], 0);
		cv::flip(kB[1], kB[1], 0);

		cv::Mat reflectMap(src.rows, 1, CV_16U);
		for (int j = 0; j < src.rows; ++j)
			reflectMap.at<ushort>(j) = abs(j);
		cv::copyMakeBorder(reflectMap, reflectMap, kernelA.rows, kernelA.rows, 0, 0, cv::BORDER_REFLECT);

		cv::Mat t[4];
		t[0].create(cvCeil(((src.rows + 2 * kernelA.rows - 2) - 5) / 4.0), src.cols, src.type());
		t[1].create(cvCeil(((src.rows + 2 * kernelA.rows - 2) - 5) / 4.0), src.cols, src.type());
		t[2].create(cvCeil(((src.rows + 2 * kernelA.rows - 2) - 5) / 4.0), src.cols, src.type());
		t[3].create(cvCeil(((src.rows + 2 * kernelA.rows - 2) - 5) / 4.0), src.cols, src.type());
		for (int i = 5, j = 0; i < (src.rows + 2 * kernelA.rows - 2); i += 4, ++j)
		{
			src.row(reflectMap.at<ushort>(i - 1)).copyTo(t[0].row(j));
			src.row(reflectMap.at<ushort>(i - 3)).copyTo(t[1].row(j));
			src.row(reflectMap.at<ushort>(i)).copyTo(t[2].row(j));
			src.row(reflectMap.at<ushort>(i - 2)).copyTo(t[3].row(j));
		}

		cv::Mat dst(src.rows / 2, src.cols, CV_MAKETYPE(src.depth(), 1));
		dst.setTo(0);
		cv::sepFilter2D(t[0], t[0], CV_MAKETYPE(src.depth(), 1), kernelH, kA[0], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
		cv::sepFilter2D(t[1], t[1], CV_MAKETYPE(src.depth(), 1), kernelH, kA[1], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
		cv::sepFilter2D(t[2], t[2], CV_MAKETYPE(src.depth(), 1), kernelH, kB[0], cv::Point(0, 0), 0, cv::BORDER_REFLECT);
		cv::sepFilter2D(t[3], t[3], CV_MAKETYPE(src.depth(), 1), kernelH, kB[1], cv::Point(0, 0), 0, cv::BORDER_REFLECT);

		cv::add(t[0], t[1], t[0]);
		cv::add(t[2], t[3], t[2]);

		cv::Mat tempKernel;
		cv::multiply(kernelA, kernelB, tempKernel);
		if (cv::sum(tempKernel)(0)>0)
		{
			for (int r = 0, tr = 0; r < dst.rows; r += 2, tr++)
			{
				t[0].row(tr).copyTo(dst.row(r));
				t[2].row(tr).copyTo(dst.row(r + 1));
			}
		}
		else
		{
			for (int r = 0, tr = 0; r < dst.rows; r += 2, tr++)
			{
				t[2].row(tr).copyTo(dst.row(r));
				t[0].row(tr).copyTo(dst.row(r + 1));
			}
		}
		return dst;
	}

	cv::Mat filter(cv::InputArray _src, cv::InputArray _kernel)
	{
		cv::Mat src = _src.getMat();
		cv::Mat kernel = _kernel.getMat();
		cv::Mat hK;
		hK.create(1, 1, kernel.type());
		hK.setTo(1);

		if (kernel.cols % 2 == 0)
			cv::copyMakeBorder(src, src, 0, 1, 0, 0, cv::BORDER_REFLECT);
		cv::Mat dst;
		cv::sepFilter2D(src, dst, CV_MAKETYPE(src.depth(), 1), hK, kernel, cv::Point(-1, -1), 0, cv::BORDER_REFLECT);
		return dst;
	}

	void q2c(cv::InputArray _y, cv::OutputArray _dst1, cv::OutputArray _dst2)
	{
		cv::Mat y = _y.getMat();
		_dst1.create(y.rows / 2, y.cols / 2, CV_MAKETYPE(y.depth(), 2));
		_dst2.create(y.rows / 2, y.cols / 2, CV_MAKETYPE(y.depth(), 2));
		cv::Mat dst1 = _dst1.getMat();
		cv::Mat dst2 = _dst2.getMat();
		cv::Mat yMap(y.rows, y.cols / 2, CV_MAKETYPE(y.depth(), 2), y.data);
		cv::Mat p, q;
		p.create(y.rows / 2, y.cols / 2, CV_MAKETYPE(y.depth(), 2));
		q.create(y.rows / 2, y.cols / 2, CV_MAKETYPE(y.depth(), 2));

		cv::Mat splitReverse[2];
		for (int i = 0; i < y.rows; i += 2)
		{
			yMap.row(i).copyTo(p.row(i / 2));
			cv::split(yMap.row(i + 1), splitReverse);
			cv::swap(splitReverse[0], splitReverse[1]);
			cv::subtract(0, splitReverse[1], splitReverse[1]);
			cv::merge(splitReverse, 2, q.row(i / 2));
		}
		cv::multiply(p, sqrt(0.5), p);
		cv::multiply(q, sqrt(0.5), q);
		cv::subtract(p, q, dst1);
		cv::add(p, q, dst2);
	}

	cv::Mat c2q(cv::Mat& w1, cv::Mat& w2, double gain0 = 1, double gain1 = 1)
	{
		cv::Mat x(w1.rows * 2, w1.cols * 2, CV_MAKETYPE(w1.depth(), 1));
		cv::Mat P, Q;
		cv::addWeighted(w1, sqrt(0.5)*gain0, w2, sqrt(0.5)*gain1, 0, P);
		cv::addWeighted(w1, sqrt(0.5)*gain0, w2, -sqrt(0.5)*gain1, 0, Q);
		cv::Mat p(w1.rows, w1.cols * 2, CV_MAKETYPE(w1.depth(), 1), P.data);
		cv::Mat q(w2.rows, w2.cols * 2, CV_MAKETYPE(w1.depth(), 1), Q.data);
		cv::Mat tempQ[2];
		int from_to[] = { 0, 1, 1, 0 };
		for (int i = 0; i < x.rows; i += 2)
		{
			p.row(i / 2).copyTo(x.row(i));
			cv::split(Q.row(i / 2), tempQ);
			cv::mixChannels(tempQ, 2, &(Q.row(i / 2)), 1, from_to, 2);
			cv::multiply(Q.row(i / 2), cv::Scalar(1, -1), Q.row(i / 2));
			q.row(i / 2).copyTo(x.row(i + 1));
		}
		return x;
	}

	int biortSize;
	cv::Mat _h0o, _g0o, _h1o, _g1o, _h2o, _g2o;
	int qshiftSize;
	cv::Mat _h0a, _h0b, _g0a, _g0b, _h1a, _h1b, _g1a, _g1b, _h2a, _h2b, _g2a, _g2b;

public:
	void forward(cv::Mat& _X, int nlevels = 3, bool include_scale = false)
	{
		cv::Mat h0o, g0o, h1o, g1o, h2o, g2o;
		cv::Mat h0a, h0b, g0a, g0b, h1a, h1b, g1a, g1b, h2a, h2b, g2a, g2b;
		_h0o.convertTo(h0o, _X.type());
		_g0o.convertTo(g0o, _X.type());
		_h1o.convertTo(h1o, _X.type());
		_g1o.convertTo(g1o, _X.type());
		if (biortSize > 4)
		{
			_h2o.convertTo(h2o, _X.type());
			_g2o.convertTo(g2o, _X.type());
		}

		_h0a.convertTo(h0a, _X.type());
		_h0b.convertTo(h0b, _X.type());
		_g0a.convertTo(g0a, _X.type());
		_g0b.convertTo(g0b, _X.type());
		_h1a.convertTo(h1a, _X.type());
		_h1b.convertTo(h1b, _X.type());
		_g1a.convertTo(g1a, _X.type());
		_g1b.convertTo(g1b, _X.type());
		if (qshiftSize > 8)
		{
			_h2a.convertTo(h2a, _X.type());
			_h2b.convertTo(h2b, _X.type());
			_g2a.convertTo(g2a, _X.type());
			_g2b.convertTo(g2b, _X.type());
		}

		cv::Mat X;

		if (include_scale)
			Yscale.resize(nlevels);

		int rExtend = 0, cExtend = 0;
		if (_X.rows % 2 != 0)
			rExtend = 1;
		if (_X.cols % 2 != 0)
			cExtend = 1;
		cv::copyMakeBorder(_X, X, 0, rExtend, 0, cExtend, cv::BORDER_REPLICATE);

		if (nlevels == 0)
			return;

		cv::Mat Lo = filter(X, h0o).t();
		cv::Mat Hi = filter(X, h1o).t();
		cv::Mat Ba;
		if (biortSize >= 6)
			Ba = filter(X, h2o).t();

		cv::Mat LoLo = filter(Lo, h0o).t();
		Yh.resize(nlevels);
		Yh[0] = std::vector<cv::Mat>(6);

		q2c(filter(Hi, h0o).t(), Yh[0][0], Yh[0][5]);
		q2c(filter(Lo, h1o).t(), Yh[0][2], Yh[0][3]);
		if (biortSize >= 6)
			q2c(filter(Ba, h2o).t(), Yh[0][1], Yh[0][4]);
		else
			q2c(filter(Hi, h1o).t(), Yh[0][1], Yh[0][4]);

		if (include_scale)
			LoLo.copyTo(Yscale[0]);

		for (int level = 1; level < nlevels; ++level)
		{
			if (LoLo.rows % 4 != 0 && LoLo.cols % 4 != 0)
				cv::copyMakeBorder(LoLo, LoLo, 1, 1, 1, 1, cv::BORDER_REFLECT);
			else if (LoLo.rows % 4 != 0)
				cv::copyMakeBorder(LoLo, LoLo, 1, 1, 0, 0, cv::BORDER_REFLECT);
			else if (LoLo.cols % 4 != 0)
				cv::copyMakeBorder(LoLo, LoLo, 0, 0, 1, 1, cv::BORDER_REFLECT);

			Lo = dfilt(LoLo, h0b, h0a).t();
			Hi = dfilt(LoLo, h1b, h1a).t();
			if (qshiftSize >= 12)
				Ba = dfilt(LoLo, h2b, h2a).t();

			LoLo = dfilt(Lo, h0b, h0a).t();

			Yh[level] = std::vector<cv::Mat>(6);
			q2c(dfilt(Hi, h0b, h0a).t(), Yh[level][0], Yh[level][5]);
			q2c(dfilt(Lo, h1b, h1a).t(), Yh[level][2], Yh[level][3]);
			if (qshiftSize >= 12)
				q2c(dfilt(Ba, h2b, h2a).t(), Yh[level][1], Yh[level][4]);
			else
				q2c(dfilt(Hi, h1b, h1a).t(), Yh[level][1], Yh[level][4]);

			if (include_scale)
				LoLo.copyTo(Yscale[level]);
		}

		LoLo.copyTo(Y1);
	}

	cv::Mat inverse()
	{
		cv::Mat h0o, g0o, h1o, g1o, h2o, g2o;
		cv::Mat h0a, h0b, g0a, g0b, h1a, h1b, g1a, g1b, h2a, h2b, g2a, g2b;
		_h0o.convertTo(h0o, Y1.type());
		_g0o.convertTo(g0o, Y1.type());
		_h1o.convertTo(h1o, Y1.type());
		_g1o.convertTo(g1o, Y1.type());
		if (biortSize > 4)
		{
			_h2o.convertTo(h2o, Y1.type());
			_g2o.convertTo(g2o, Y1.type());
		}

		_h0a.convertTo(h0a, Y1.type());
		_h0b.convertTo(h0b, Y1.type());
		_g0a.convertTo(g0a, Y1.type());
		_g0b.convertTo(g0b, Y1.type());
		_h1a.convertTo(h1a, Y1.type());
		_h1b.convertTo(h1b, Y1.type());
		_g1a.convertTo(g1a, Y1.type());
		_g1b.convertTo(g1b, Y1.type());
		if (qshiftSize > 8)
		{
			_h2a.convertTo(h2a, Y1.type());
			_h2b.convertTo(h2b, Y1.type());
			_g2a.convertTo(g2a, Y1.type());
			_g2b.convertTo(g2b, Y1.type());
		}

		int a = Yh.size();

		cv::Mat lh, hl, hh;
		cv::Mat y1, y2, Z;
		Z = Y1;
		int current_level = Yh.size();
		for (; current_level >= 2; current_level--)
		{
			lh = c2q(Yh[current_level - 1][0], Yh[current_level - 1][5], 1);
			hl = c2q(Yh[current_level - 1][2], Yh[current_level - 1][3], 1);
			hh = c2q(Yh[current_level - 1][1], Yh[current_level - 1][4], 1);

			cv::add(ifilt(Z, g0b, g0a), ifilt(lh, g1b, g1a), y1);

			if (qshiftSize == 12)
			{
				y2 = ifilt(hl, g0b, g0a);
				cv::Mat y2bp = ifilt(hh, g2b, g2a);
				cv::add(ifilt(y1.t(), g0b, g0a), ifilt(y2.t(), g1b, g1a), Z);
				cv::add(Z, ifilt(y2bp.t(), g2b, g2a), Z);
				Z = Z.t();
			}
			else
			{
				cv::add(ifilt(hl, g0b, g0a), ifilt(hh, g1b, g1a), y2);
				cv::add(ifilt(y1.t(), g0b, g0a), ifilt(y2.t(), g1b, g1a), Z);
				Z = Z.t();
			}

			while (2 * Yh[current_level - 2][0].rows != Z.rows && 2 * Yh[current_level - 2][0].cols != Z.cols)
				Z = Z(cv::Rect(1, 1, Z.cols - 2, Z.rows - 2));
			while (2 * Yh[current_level - 2][0].rows != Z.rows)
				Z = Z(cv::Rect(0, 1, Z.cols, Z.rows - 2));
			while (2 * Yh[current_level - 2][0].cols != Z.cols)
				Z = Z(cv::Rect(1, 0, Z.cols - 2, Z.rows));
		}
		if (current_level == 1)
		{
			lh = c2q(Yh[current_level - 1][0], Yh[current_level - 1][5], 1);
			hl = c2q(Yh[current_level - 1][2], Yh[current_level - 1][3], 1);
			hh = c2q(Yh[current_level - 1][1], Yh[current_level - 1][4], 1);

			cv::add(filter(Z, g0o), filter(lh, g1o), y1);
			if (biortSize >= 6)
			{
				y2 = filter(hl, g0o);
				cv::Mat y2bp = filter(hh, g2o);
				cv::add(filter(y1.t(), g0o), filter(y2.t(), g1o), Z);
				cv::add(Z, filter(y2bp.t(), g2o), Z);
				Z = Z.t();
			}
			else
			{
				cv::add(filter(hl, g0o), filter(hh, g1o), y2);
				cv::add(filter(y1.t(), g0o), filter(y2.t(), g1o), Z);
				Z = Z.t();
			}
		}
		return Z;
	}

	cv::Mat Y1;
	std::vector<std::vector<cv::Mat> > Yh;
	std::vector<cv::Mat> Yscale;
};

enum normType
{
	NORM_2PI,
	NORM_PINPI
} NORM_TYPE;

void normalizePI( cv::InputArray _src, cv::InputOutputArray _dst, int norm_type, int rtype = -1, cv::InputArray _mask = cv::noArray())
{
	using namespace cv;
	int type = _src.type(), depth = CV_MAT_DEPTH(type), cn = CV_MAT_CN(type);
	if( rtype < 0 )
		rtype = _dst.fixedType() ? _dst.depth() : depth;
	_dst.createSameSize(_src, CV_MAKETYPE(rtype, cn));
	Mat src = _src.getMat(), dst = _dst.getMat();
	Mat temp, cmp, mask;
	if(!_mask.empty())
	{
		int fromTo[] = {1,1,1,2,1,3,1,4};
		mixChannels(&(_mask.getMat()), 1, &mask, cn, fromTo, cn);
	}
	temp.create(src.rows, src.cols, src.type());
	temp.setTo(2*CV_PI);
	if(norm_type == normType::NORM_2PI)
	{
		cmp = src < 0;
	}
	else
	{
		cmp = src < -CV_PI;
	}
	cmp.convertTo(cmp, CV_8U);
	if(!_mask.empty())
	{
		bitwise_and(cmp, mask, cmp);
	}
	add(src, temp, dst, cmp);

	if(norm_type == normType::NORM_2PI)
	{
		cmp = src >= 2*CV_PI;
	}
	else
	{
		cmp = src >= CV_PI;
	}
	cmp.convertTo(cmp, CV_8U);
	if(!_mask.empty())
	{
		bitwise_and(cmp, mask, cmp);
	}
	subtract(dst, temp, dst, cmp);
}

cv::Mat confidence(cv::Mat& sb1, cv::Mat& sb2, double eps = 1.0e-6)
{
	cv::Mat us, vs;
	cv::copyMakeBorder(sb1, us, 1, 1, 1, 1, cv::BORDER_REFLECT);
	cv::copyMakeBorder(sb2, vs, 1, 1, 1, 1, cv::BORDER_REFLECT);

	cv::Mat temp[2], usabs, vsabs;
	cv::split(us, temp);
	cv::magnitude(temp[0], temp[1], usabs);
	cv::pow(usabs, 3, usabs);
	cv::split(vs, temp);
	cv::magnitude(temp[0], temp[1], vsabs);
	cv::pow(vsabs, 3, vsabs);

	cv::Mat coeffs;
	cv::mulSpectrums(vs, us, coeffs, 0, true);

	cv::Mat num(coeffs.rows - 2, coeffs.cols - 2, coeffs.type(), cv::Scalar(0,0,0,0));
	cv::Mat denom(usabs.rows - 2, usabs.cols - 2, usabs.type(), cv::Scalar(eps, eps, eps, eps));
	//-1, -1
	cv::add(num, coeffs(cv::Rect(0, 0, coeffs.cols - 2, coeffs.rows - 2)), num);
	cv::add(denom, usabs(cv::Rect(0, 0, usabs.cols - 2, usabs.rows - 2)), denom);
	cv::add(denom, vsabs(cv::Rect(0, 0, vsabs.cols - 2, vsabs.rows - 2)), denom);
	//+1, -1
	cv::add(num, coeffs(cv::Rect(2, 0, coeffs.cols - 2, coeffs.rows - 2)), num);
	cv::add(denom, usabs(cv::Rect(2, 0, usabs.cols - 2, usabs.rows - 2)), denom);
	cv::add(denom, vsabs(cv::Rect(2, 0, vsabs.cols - 2, vsabs.rows - 2)), denom);
	//-1, +1
	cv::add(num, coeffs(cv::Rect(0, 2, coeffs.cols - 2, coeffs.rows - 2)), num);
	cv::add(denom, usabs(cv::Rect(0, 2, usabs.cols - 2, usabs.rows - 2)), denom);
	cv::add(denom, vsabs(cv::Rect(0, 2, vsabs.cols - 2, vsabs.rows - 2)), denom);
	//+1, +1
	cv::add(num, coeffs(cv::Rect(2, 2, coeffs.cols - 2, coeffs.rows - 2)), num);
	cv::add(denom, usabs(cv::Rect(2, 2, usabs.cols - 2, usabs.rows - 2)), denom);
	cv::add(denom, vsabs(cv::Rect(2, 2, vsabs.cols - 2, vsabs.rows - 2)), denom);

	cv::split(num, temp);
	cv::magnitude(temp[0], temp[1], num);
	cv::multiply(num, num, num);
	cv::divide(num, denom, denom);
	return denom;
}

double EXPECTED_SHIFTS[] = { -1 * CV_PI / 2.15, -3 * CV_PI / 2.15,
							-3 * CV_PI / 2.15, -3 * CV_PI / 2.15,
							-3 * CV_PI / 2.15, -1 * CV_PI / 2.15,
							-3 * CV_PI / 2.15, 1 * CV_PI / 2.15,
							-3 * CV_PI / 2.15, 3 * CV_PI / 2.15,
							- 1 * CV_PI / 2.15, 3 * CV_PI / 2.15 };
void phasegradient(cv::Mat& sb1, cv::Mat& sb2, cv::Mat& dx, cv::Mat& dy, cv::Mat& dt, double ES1 = 0, double ES2 = 0)
{
	cv::Mat S1, S2;
	cv::Mat temp[2], tempAlias;
	cv::mulSpectrums(sb1(cv::Rect(1, 0, sb1.cols - 1, sb1.rows)), sb1(cv::Rect(0, 0, sb1.cols - 1, sb1.rows)), S1, 0, true);
	cv::mulSpectrums(sb2(cv::Rect(1, 0, sb2.cols - 1, sb2.rows)), sb2(cv::Rect(0, 0, sb2.cols - 1, sb2.rows)), S2, 0, true);

	cv::add(S1, S2, S1);
	S2.setTo(cv::Scalar(cos(ES1), -sin(ES1)));
	cv::mulSpectrums(S1, S2, S1, 0);

	cv::copyMakeBorder(S1, S1, 0, 0, 0, 1, cv::BORDER_REFLECT);
	cv::add(S1(cv::Rect(0, 0, S1.cols - 2, S1.rows)), S1(cv::Rect(1, 0, S1.cols - 2, S1.rows)), tempAlias);
	cv::multiply(tempAlias, cv::Scalar(0.5, 0.5), S1(cv::Rect(1, 0, S1.cols - 2, S1.rows)));
	cv::split(S1, temp);
	cv::cartToPolar(temp[0], temp[1], tempAlias, dx);
	normalizePI(dx, dx, normType::NORM_PINPI);
	cv::add(dx, ES1, dx);

	cv::mulSpectrums(sb1(cv::Rect(0, 1, sb1.cols, sb1.rows - 1)), sb1(cv::Rect(0, 0, sb1.cols, sb1.rows - 1)), S1, 0, true);
	cv::mulSpectrums(sb2(cv::Rect(0, 1, sb2.cols, sb2.rows - 1)), sb2(cv::Rect(0, 0, sb2.cols, sb2.rows - 1)), S2, 0, true);
	cv::add(S1, S2, S1);
	S2.setTo(cv::Scalar(cos(ES2), -sin(ES2)));
	cv::mulSpectrums(S1, S2, S1, 0);

	cv::copyMakeBorder(S1, S1, 0, 1, 0, 0, cv::BORDER_REFLECT);
	cv::add(S1(cv::Rect(0, 0, S1.cols, S1.rows - 2)), S1(cv::Rect(0, 1, S1.cols, S1.rows - 2)), tempAlias);
	cv::multiply(tempAlias, cv::Scalar(0.5,0.5), S1(cv::Rect(0, 1, S1.cols, S1.rows - 2)));
	cv::split(S1, temp);
	cv::cartToPolar(temp[0], temp[1], tempAlias, dy);
	normalizePI(dy, dy, normType::NORM_PINPI);
	cv::add(dy, ES2, dy);

	cv::mulSpectrums(sb2, sb1, S2, 0, true);
	cv::split(S2, temp);
	cv::cartToPolar(temp[0], temp[1], tempAlias, dt);
	normalizePI(dt, dt, normType::NORM_PINPI);
}

std::vector<std::vector<cv::Mat> > qtildematrices(DTCWT2d& src, DTCWT2d& ref, int level)
{
	std::vector<std::vector<cv::Mat> > Qt_mats;
	cv::Mat xs, ys;
	for (int i = 0; i<2; ++i, --level)
	{
		std::vector<cv::Mat> Qt_mat_sum(27);
		xs.create(src.Yh[level][0].rows, src.Yh[level][0].cols, CV_MAKETYPE(src.Yh[level][0].depth(), 1));
		ys.create(src.Yh[level][0].rows, src.Yh[level][0].cols, CV_MAKETYPE(src.Yh[level][0].depth(), 1));
		for (int c = 0; c < xs.cols; ++c)
			xs.col(c).setTo(c / (double)xs.cols);
		for (int r = 0; r < ys.rows; ++r)
			ys.row(r).setTo(r / (double)ys.rows);

		for (int j = 0; j<6; ++j)
		{
			cv::Mat C_d, temp[7];
			std::vector<cv::Mat> Qt(27);

			C_d = confidence(src.Yh[level][j], ref.Yh[level][j]);
			
			phasegradient(src.Yh[level][j], ref.Yh[level][j], temp[0], temp[1], temp[6], EXPECTED_SHIFTS[2 * j], EXPECTED_SHIFTS[2 * j + 1]);
			
			cv::multiply(temp[0], src.Yh[level][j].cols, temp[0]);
			cv::multiply(temp[1], src.Yh[level][j].rows, temp[1]);
			cv::multiply(xs, temp[0], temp[2]);
			cv::multiply(xs, temp[1], temp[3]);
			cv::multiply(ys, temp[0], temp[4]);
			cv::multiply(ys, temp[1], temp[5]);
			cv::subtract(0, temp[6], temp[6]);

			int elem_idx = 0;
			for (int r = 0; r < 6; ++r)
			{
				for (int c = r; c < 6; ++c)
				{
					cv::multiply(temp[r], temp[c], Qt[elem_idx]);
					elem_idx++;
				}
			}

			for (int r = 0; r < 6; ++r)
			{
				cv::multiply(temp[r], temp[6], Qt[elem_idx]);
				elem_idx++;
			}

			cv::multiply(C_d, C_d, C_d);
			if (j == 0)
			{
				for (int q = 0; q < Qt.size(); ++q)
				{
					cv::multiply(C_d, Qt[q], Qt_mat_sum[q]);
				}
			}
			else
			{
				for (int q = 0; q < Qt.size(); ++q)
				{
					cv::multiply(C_d, Qt[q], Qt[q]);
					cv::add(Qt[q], Qt_mat_sum[q], Qt_mat_sum[q]);
				}
			}
		}
		Qt_mats.push_back(Qt_mat_sum);
	}
	return Qt_mats;
}

cv::Mat solveTransform(cv::Mat& src)
{
	cv::Mat Q(6, 6, CV_64F);
	cv::Mat q(6, 1, CV_64F);
	cv::Mat rv;
	Q.setTo(0);
	int ravel = 6, unravel = 1;
	int skip = 0;
	for (int i = 0; i<6; ++i)
	{
		int j = 6 - i;
		src(cv::Rect(skip, 0, j, 1)).copyTo(Q(cv::Rect(i, i, j, 1)));
		skip += j;
		q.at<double>(j - 1) = -src.at<double>(src.cols - i - 1);
	}
	cv::solve(Q, q, rv, cv::DECOMP_LU);
	return rv;
}

std::vector<cv::Mat> solveTransform(std::vector<cv::Mat>& src)
{
	cv::Mat Q(6, 6, CV_64F);
	cv::Mat q(1, 27, CV_64F);
	cv::Mat r;
	std::vector<cv::Mat> rv(6);
	for(int i = 0; i<rv.size(); ++i)
	{
		rv[i].create(src[0].rows, src[0].cols, src[0].type());
	}
	for (int vec = 0; vec < src[0].rows*src[0].cols; ++vec)
	{
		for (int ts = 0; ts<src.size(); ++ts)
		{
			q.at<double>(ts) = src[ts].at<double>(vec);
		}
		r = solveTransform(q);
		for (int rvs = 0; rvs<rv.size(); ++rvs)
		{
			rv[rvs].at<double>(vec) = r.at<double>(rvs);
		}
	}
	return rv;
}

void velocityField(std::vector<cv::Mat>& avecs, cv::Size& sz, cv::Mat& vxs, cv::Mat& vys)
{
	cv::Mat xs, ys;
	xs.create(avecs[0].rows, avecs[0].cols, CV_64F);
	ys.create(avecs[0].rows, avecs[0].cols, CV_64F);
	for (int c = 0; c < xs.cols; ++c)
		xs.col(c).setTo(c / (double)xs.cols);
	for (int r = 0; r < ys.rows; ++r)
		ys.row(r).setTo(r / (double)ys.rows);

	cv::Mat t1, t2;

	cv::multiply(avecs[2], xs, t1);
	cv::multiply(avecs[4], ys, t2);
	cv::add(t1, t2, t1);
	cv::add(t1, avecs[0], t1);
	cv::resize(t1, vxs, sz, 0, 0, cv::INTER_LANCZOS4);

	cv::multiply(avecs[3], xs, t1);
	cv::multiply(avecs[5], ys, t2);
	cv::add(t1, t2, t1);
	cv::add(t1, avecs[1], t1);
	cv::resize(t1, vys, sz, 0, 0, cv::INTER_LANCZOS4);
}

void calcRemap(std::vector<cv::Mat>& avecs, cv::Size& sz, cv::Mat& mxs, cv::Mat& mys)
{
	cv::Mat xs, ys;
	xs.create(avecs[0].rows, avecs[0].cols, CV_MAKETYPE(avecs[0].depth(), 1));
	ys.create(avecs[0].rows, avecs[0].cols, CV_MAKETYPE(avecs[0].depth(), 1));
	for (int c = 0; c < xs.cols; ++c)
		xs.col(c).setTo(c/(double)xs.cols);
	for (int r = 0; r < ys.rows; ++r)
		ys.row(r).setTo(r/(double)ys.rows);

	cv::Mat t1, t2;

	cv::multiply(avecs[2], xs, t1);
	cv::multiply(avecs[4], ys, t2);
	cv::add(t1, t2, t1);
	cv::add(t1, avecs[0], t1);
	cv::resize(t1, mxs, sz, 0, 0, cv::INTER_LANCZOS4);

	cv::multiply(avecs[3], xs, t1);
	cv::multiply(avecs[5], ys, t2);
	cv::add(t1, t2, t1);
	cv::add(t1, avecs[1], t1);
	cv::resize(t1, mys, sz, 0, 0, cv::INTER_LANCZOS4);
}

cv::Mat phase_image(cv::Mat& X, cv::Mat& Y, int slice)
{
	static const double W0 = -3 * CV_PI / 2.15;
	static const double W1 = -CV_PI / 2.15;
	static const double DTHETA_DX_2D[] = { W1, W0, W0, W0, W0, W1 };
	static const double DTHETA_DY_2D[] = { W0, W0, W1, -W1, -W0, -W0 };

	cv::Mat mag, angle, xy[2], out;
	mag.create(X.rows, X.cols, CV_MAKETYPE(X.depth(), 1));
	mag.setTo(1);
	angle.create(X.rows, X.cols, CV_MAKETYPE(X.depth(), 1));
	cv::addWeighted(X, DTHETA_DX_2D[slice], Y, DTHETA_DY_2D[slice], 0, angle);
	cv::polarToCart(mag, angle, xy[0], xy[1]);
	cv::merge(xy, 2, out);
	return out;
}

void warpHighpass(std::vector<cv::Mat>& hp, std::vector<cv::Mat>& avecs, int interpolation = cv::INTER_LINEAR)
{
	cv::Mat xs, ys;
	xs.create(hp[0].rows, hp[0].cols, CV_MAKETYPE(hp[0].depth(), 1));
	ys.create(hp[0].rows, hp[0].cols, CV_MAKETYPE(hp[0].depth(), 1));
	for (int c = 0; c < xs.cols; ++c)
		xs.col(c).setTo(c);
	for (int r = 0; r < ys.rows; ++r)
		ys.row(r).setTo(r);

	cv::Mat vxs, vys;
	calcRemap(avecs, cv::Size(hp[0].cols, hp[0].rows), vxs, vys);
	cv::multiply(vxs, xs.cols, vxs);
	cv::multiply(vys, ys.rows, vys);
	cv::add(vxs, xs, vxs);
	cv::add(vys, ys, vys);
	cv::Mat txs, tys;
	vxs.convertTo(txs, CV_32F);
	vys.convertTo(tys, CV_32F);

	cv::Mat tempMap;
	for (int i = 0; i<hp.size(); ++i)
	{
		cv::mulSpectrums(hp[i], phase_image(xs, ys, i), hp[i], 0, true);
		cv::remap(hp[i], tempMap, txs, tys, interpolation, cv::BORDER_REFLECT);
		cv::mulSpectrums(tempMap, phase_image(vxs, vys, i), hp[i], 0, false);
	}
}

void warpLowpass(cv::InputArray _lp, cv::OutputArray _dst, std::vector<cv::Mat>& avecs, int interpolation = cv::INTER_LINEAR)
{
	cv::Mat lp = _lp.getMat();
	_dst.create(lp.rows, lp.cols, lp.type());
	cv::Mat dst = _dst.getMat();
	cv::Mat xs, ys;
	xs.create(lp.rows, lp.cols, CV_MAKETYPE(lp.depth(), 1));
	ys.create(lp.rows, lp.cols, CV_MAKETYPE(lp.depth(), 1));
	for (int c = 0; c < xs.cols; ++c)
		xs.col(c).setTo(c);
	for (int r = 0; r < ys.rows; ++r)
		ys.row(r).setTo(r);

	cv::Mat vxs, vys;
	calcRemap(avecs, cv::Size(lp.cols, lp.rows), vxs, vys);
	cv::multiply(vxs, xs.cols, vxs);
	cv::multiply(vys, ys.rows, vys);
	cv::add(vxs, xs, vxs);
	cv::add(vys, ys, vys);
	cv::Mat txs, tys;
	vxs.convertTo(txs, CV_32F);
	vys.convertTo(tys, CV_32F);

	cv::remap(lp, dst, txs, tys, interpolation, cv::BORDER_REFLECT);
}

DTCWT2d warpTransform(DTCWT2d& t, std::vector<cv::Mat>& avecs, int level, int interpolation = cv::INTER_LINEAR)
{
	DTCWT2d newT(t);
	for (int i = level; i>=level-1; --i)
	{
		warpHighpass(newT.Yh[i], avecs, interpolation);
	}
	return newT;
}

std::vector<cv::Mat> estimateRegistration(DTCWT2d& src, DTCWT2d& ref, int toLevel = 2)
{
	int nlevels = src.Yh.size();
	std::vector<cv::Mat> avecs(6);
	int maxLevel = MIN(3, src.Yh.size()-1);
	for(int i = 0; i<avecs.size(); ++i)
	{
		avecs[i].create(src.Yh[maxLevel][0].cols, src.Yh[maxLevel][0].rows, src.Y1.type());
	}

	cv::Mat Qt_mats, Qt;
	{
		std::vector<std::vector<cv::Mat> > temp = qtildematrices(src, ref, nlevels-1);

		Qt_mats = cv::Mat((int)temp.size(), (int)temp[0].size(), CV_64F);
		Qt = cv::Mat(1, (int)temp[0].size(), CV_64F);
		Qt.setTo(0);
		for (int i = 0; i < temp.size(); ++i)
		{
			double sum = 0;
			for (int j = 0; j<temp[i].size(); ++j)
			{
				Qt_mats.at<double>(i, j) = cv::sum(temp[i][j])(0);
				Qt.at<double>(j) += Qt_mats.at<double>(i, j);
			}
		}
	}
	
	cv::Mat a = solveTransform(Qt);
	for (int i = 0; i < a.cols*a.rows; ++i)
	{
		avecs[i].setTo(a.at<double>(i));
	}

	bool secondTime = true;
	DTCWT2d warped;
	for (int levels = nlevels-1; levels > toLevel;)
	{
		warped = warpTransform(src, avecs, levels, cv::INTER_LINEAR);

		std::vector<std::vector<cv::Mat> > all_qts = qtildematrices(warped, ref, levels);
		if (!all_qts.empty())
		{
			std::vector<cv::Mat> qts(27);
			for (int i = 0; i<all_qts.size(); ++i)
			{
				for (int j = 0; j<all_qts[i].size(); ++j)
				{
					if (i == 0)
					{
						qts[j].create(cv::Size(avecs[0].cols, avecs[0].rows), avecs[0].type());
						qts[j].setTo(0);
					}
					cv::blur(all_qts[i][j], all_qts[i][j], cv::Size(3, 3), cv::Point(-1,-1), cv::BORDER_REFLECT);
					cv::resize(all_qts[i][j], all_qts[i][j], cv::Size(avecs[0].cols, avecs[0].rows), 0, 0, cv::INTER_LINEAR);
					cv::add(qts[j], all_qts[i][j], qts[j]);
				}
			}

			std::vector<cv::Mat> tempAvecs = solveTransform(qts);
			for (int i = 0; i<avecs.size(); ++i)
			{
				cv::add(avecs[i], tempAvecs[i], avecs[i]);
			}
		}

		if (secondTime)
			levels--;
		secondTime = !secondTime;
	}
	return avecs;
}


cv::Mat phase_image(cv::Size sz, int depth, double dx, double dy, bool reverse = false, double scalex = 0, double scaley = 0)
{
	cv::Mat mag, angle, xy[2], out;
	mag.create(sz, CV_MAKETYPE(depth, 1));
	mag.setTo(1);
	angle.create(sz, CV_MAKETYPE(depth, 1));
	if (reverse == false)
	{
		for (int i = 0; i<angle.cols; ++i)
			angle.col(i).setTo(dx*i);
		for (int j = 0; j<angle.rows; ++j)
			cv::add(angle.row(j), dy*j, angle.row(j));
	}
	else
	{
		for (int i = 0; i<angle.cols; ++i)
			angle.col(i).setTo(dx*(scalex*(i + 0.5) - 0.5));
		for (int j = 0; j<angle.rows; ++j)
			cv::add(angle.row(j), dy*(scaley*(j + 0.5) - 0.5), angle.row(j));
	}
	cv::polarToCart(mag, angle, xy[0], xy[1]);
	//mag.copyTo(xy[0]);
	//angle.copyTo(xy[1]);
	cv::merge(xy, 2, out);
	return out;
}

DTCWT2d resize_DTCWT_direct(cv::Mat& im, DTCWT2d& trans, double scalex, double scaley, int interpolation)
{
	DTCWT2d scaled(trans);
	cv::resize(scaled.Y1, scaled.Y1, cv::Size(0, 0), scalex, scaley, interpolation);
	//cv::resize(im, scaled.Y1, cv::Size(0, 0), scalex / 2.0, scaley / 2.0, interpolation);
	cv::Size sz(cvFloor(scaled.Y1.cols / 2.0), cvFloor(scaled.Y1.rows / 2.0));
	for (int i = scaled.Yh.size() - 1; i >= 0; --i)
	{
		for (int j = 0; j<scaled.Yh[i].size(); ++j)
		{
			cv::resize(scaled.Yh[i][j], scaled.Yh[i][j], sz, 0, 0, interpolation);
		}
		sz.width *= 2;
		sz.height *= 2;
	}
	return scaled;
}

void resizeOne(cv::Mat& input, cv::Mat& output, cv::Size sz, int j, int interpolation)
{
	cv::Mat xs, ys, sxs, sys;
	xs.create(input.rows, input.cols, CV_MAKETYPE(input.depth(), 1));
	ys.create(input.rows, input.cols, CV_MAKETYPE(input.depth(), 1));
	for (int c = 0; c < xs.cols; ++c)
		xs.col(c).setTo(c);
	for (int r = 0; r < ys.rows; ++r)
		ys.row(r).setTo(r);

	sxs.create(sz, CV_MAKETYPE(input.depth(), 1));
	sys.create(sz, CV_MAKETYPE(input.depth(), 1));
	for (int c = 0; c < sxs.cols; ++c)
		sxs.col(c).setTo(c);
	for (int r = 0; r < sys.rows; ++r)
		sys.row(r).setTo(r);
	cv::add(sxs, 0.5, sxs);
	cv::add(sys, 0.5, sys);
	sxs.convertTo(sxs, CV_MAKETYPE(input.depth(), 1), (float)xs.cols / (float)sxs.cols, -0.5);
	sys.convertTo(sys, CV_MAKETYPE(input.depth(), 1), (float)ys.rows / (float)sys.rows, -0.5);

	cv::Mat temp;
	cv::mulSpectrums(input, phase_image(xs, ys, j), temp, 0, true);
	//cv::resize(output, output, sz, 0, 0, interpolation);
	sxs.convertTo(xs, CV_32F);
	sys.convertTo(ys, CV_32F);
	cv::remap(temp, output, xs, ys, interpolation, cv::BORDER_REFLECT);
	cv::mulSpectrums(output, phase_image(sxs, sys, j), output, 0, false);
}

DTCWT2d resize_DTCWT(cv::Mat& im, DTCWT2d& trans, double scalex, double scaley, int interpolation)
{
	DTCWT2d scaled(trans);
	cv::resize(scaled.Y1, scaled.Y1, cv::Size(0, 0), scalex, scaley, interpolation);
	//cv::resize(im, scaled.Y1, cv::Size(0, 0), scalex / 2.0, scaley / 2.0, interpolation);
	cv::Size sz(cvFloor(scaled.Y1.cols / 2.0), cvFloor(scaled.Y1.rows / 2.0));
	for (int i = scaled.Yh.size() - 1; i >= 0; --i)
	{
		for (int j = 0; j<scaled.Yh[i].size(); ++j)
		{
			resizeOne(scaled.Yh[i][j], scaled.Yh[i][j], sz, j, interpolation);
			//cv::multiply(scaled.Yh[i][j], cv::Scalar(-1, -1), scaled.Yh[i][j]);
		}
		sz.width *= 2;
		sz.height *= 2;
	}
	return scaled;
}

double psnr(cv::Mat& im, cv::Mat& ref)
{
	cv::Mat temp;
	cv::absdiff(ref, im, temp);
	cv::multiply(temp, temp, temp);
	return 20 * std::log10(1.0 / cv::mean(temp)(0));
}

#define SQUARE(x) ((x)*(x))
int _tmain(int argc, _TCHAR* argv[])
{
	cv::Mat image1, image2, temp, magnitude;
	DTCWT2d pim, nim;

	//image1 = cv::imread("F:/Data/highway/input/in000325.jpg");
	image1 = cv::imread("aloeL.jpg");
	cv::cvtColor(image1, image1, cv::COLOR_BGR2GRAY);
	image1.convertTo(image1, CV_64F, 1.0/255.0);
	std::cout<<image1.cols<<" "<<image1.rows<<"\n";
	pim.forward(image1, 8, false);
	cv::imshow("image1", image1);

	//image2 = cv::imread("F:/Data/highway/input/in000335.jpg");
	image2 = cv::imread("aloeR.jpg");
	cv::cvtColor(image2, image2, cv::COLOR_BGR2GRAY);
	image2.convertTo(image2, CV_64F, 1.0/255.0);
	nim.forward(image2, 8, false);
	cv::imshow("image2", image2);

	cv::Mat vxs, vys;
	std::vector<cv::Mat> avecs;
	//for(int i = 0; i<100; ++i)
	{
		avecs = estimateRegistration(pim, nim, 2);
		velocityField(avecs, cv::Size(image1.cols,image1.rows), vxs, vys);
	}
	
	warpLowpass(image1, temp, avecs);
	//cv::normalize(temp, temp, 1, 0, cv::NORM_MINMAX);
	cv::imshow("remap", temp);
	cv::magnitude(vxs, vys, magnitude);
	cv::normalize(vxs, magnitude, 1, 0, cv::NORM_MINMAX);
	magnitude.convertTo(magnitude, CV_8U, 255.0);
	cv::imwrite("Flow_Magnitude_aloe.png", magnitude);
	cv::imshow("mag", magnitude);
	cv::absdiff(temp, image2, temp);
	cv::imshow("diff", temp);
	cv::waitKey();
	return 0;
}

